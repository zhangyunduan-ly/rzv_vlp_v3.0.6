From a35fa520f3553b417ed40d45ba14e5c3f402faed Mon Sep 17 00:00:00 2001
From: Nhat Thieu <nhat.thieu.xr@renesas.com>
Date: Tue, 27 Feb 2024 18:46:04 +0700
Subject: [PATCH 3/4] Fix kernel warning when try to enable/disable regulator

Signed-off-by: Nhat Thieu <nhat.thieu.xr@renesas.com>
---
 drivers/gpu/arm/midgard/mali_kbase_core_linux.c          | 9 ++++-----
 drivers/gpu/arm/midgard/mali_kbase_defs.h                | 3 ++-
 .../midgard/platform/devicetree/mali_kbase_runtime_pm.c  | 4 ++--
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/drivers/gpu/arm/midgard/mali_kbase_core_linux.c b/drivers/gpu/arm/midgard/mali_kbase_core_linux.c
index f7eb898..31d7d81 100644
--- a/drivers/gpu/arm/midgard/mali_kbase_core_linux.c
+++ b/drivers/gpu/arm/midgard/mali_kbase_core_linux.c
@@ -4670,8 +4670,7 @@ int power_control_init(struct kbase_device *kbdev)
 	int err = 0;
 	unsigned int i;
 #if defined(CONFIG_REGULATOR)
-	static const char *const regulator_names[] = { "mali", "shadercores" };
-	BUILD_BUG_ON(ARRAY_SIZE(regulator_names) < BASE_MAX_NR_CLOCKS_REGULATORS);
+	static const char *const regulator_names[] = { "mali" };
 #endif /* CONFIG_REGULATOR */
 
 	if (!kbdev)
@@ -4687,7 +4686,7 @@ int power_control_init(struct kbase_device *kbdev)
 	 * Any other error is ignored and the driver will continue
 	 * operating with a partial initialization of regulators.
 	 */
-	for (i = 0; i < BASE_MAX_NR_CLOCKS_REGULATORS; i++) {
+	for (i = 0; i < ARRAY_SIZE(regulator_names); i++) {
 		kbdev->regulators[i] = regulator_get_optional(kbdev->dev, regulator_names[i]);
 		if (IS_ERR(kbdev->regulators[i])) {
 			err = PTR_ERR(kbdev->regulators[i]);
@@ -4696,7 +4695,7 @@ int power_control_init(struct kbase_device *kbdev)
 		}
 	}
 	if (err == -EPROBE_DEFER) {
-		while (i > 0)
+		while ((i > 0) && (i < ARRAY_SIZE(regulator_names)))
 			regulator_put(kbdev->regulators[--i]);
 		return err;
 	}
@@ -4781,7 +4780,7 @@ int power_control_init(struct kbase_device *kbdev)
 #elif (KERNEL_VERSION(4, 10, 0) <= LINUX_VERSION_CODE)
 	if (kbdev->nr_regulators > 0) {
 		kbdev->opp_table = dev_pm_opp_set_regulators(kbdev->dev, regulator_names,
-							     BASE_MAX_NR_CLOCKS_REGULATORS);
+							     kbdev->nr_regulators);
 
 		if (IS_ERR(kbdev->opp_table)) {
 			err = PTR_ERR(kbdev->opp_table);
diff --git a/drivers/gpu/arm/midgard/mali_kbase_defs.h b/drivers/gpu/arm/midgard/mali_kbase_defs.h
index 16fa60c..8da9719 100644
--- a/drivers/gpu/arm/midgard/mali_kbase_defs.h
+++ b/drivers/gpu/arm/midgard/mali_kbase_defs.h
@@ -141,7 +141,8 @@
  * This is dependent on support for of_property_read_u64_array() in the
  * kernel.
  */
-#define BASE_MAX_NR_CLOCKS_REGULATORS (2)
+#define BASE_MAX_NR_CLOCKS_REGULATORS (3)
+#define IS_REGULATOR_ALWAYS_ON (1)
 
 /* Forward declarations */
 struct kbase_context;
diff --git a/drivers/gpu/arm/midgard/platform/devicetree/mali_kbase_runtime_pm.c b/drivers/gpu/arm/midgard/platform/devicetree/mali_kbase_runtime_pm.c
index f40d31f..67b4a07 100644
--- a/drivers/gpu/arm/midgard/platform/devicetree/mali_kbase_runtime_pm.c
+++ b/drivers/gpu/arm/midgard/platform/devicetree/mali_kbase_runtime_pm.c
@@ -34,7 +34,7 @@ static void enable_gpu_power_control(struct kbase_device *kbdev)
 {
 	unsigned int i;
 
-#if defined(CONFIG_REGULATOR)
+#if (defined(CONFIG_REGULATOR) && (!IS_REGULATOR_ALWAYS_ON))
 	for (i = 0; i < kbdev->nr_regulators; i++) {
 		if (WARN_ON(kbdev->regulators[i] == NULL))
 			;
@@ -78,7 +78,7 @@ static void disable_gpu_power_control(struct kbase_device *kbdev)
 			WARN_ON(reset_control_assert(kbdev->resets[i]));
 	};
 
-#if defined(CONFIG_REGULATOR)
+#if (defined(CONFIG_REGULATOR) && (!IS_REGULATOR_ALWAYS_ON))
 	for (i = 0; i < kbdev->nr_regulators; i++) {
 		if (WARN_ON(kbdev->regulators[i] == NULL))
 			;
-- 
2.25.1

