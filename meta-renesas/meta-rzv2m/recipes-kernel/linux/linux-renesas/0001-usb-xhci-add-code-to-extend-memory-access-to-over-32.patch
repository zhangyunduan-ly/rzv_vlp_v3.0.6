From 5bcf47fc2390009eaad10c26cfcf230cbe830b2e Mon Sep 17 00:00:00 2001
From: hienhuynh <hien.huynh.px@renesas.com>
Date: Wed, 12 Jun 2024 22:05:45 +0700
Subject: [PATCH 1/2] usb: xhci: add code to extend memory access to over 32
 bits memory region for RZ/V2M

RZ/V2M only supports over 32 bits memory region in Linux.
To support USB3.0 (xHCI) can work with this region, extended memory
access is applied although RZ/V2M xHCI controller can not access to
64 bits memory.
It will switch bank 0 (0x0 - 0xFFFF_FFFF) address to
bank 1 address (0x1_0000_0000 - 0x1_FFFF_FFFF) by SYS that was set
before.

Signed-off-by: hienhuynh <hien.huynh.px@renesas.com>
---
 drivers/usb/host/xhci-rcar.c |  9 ++++++++-
 drivers/usb/host/xhci-ring.c |  7 +++++++
 drivers/usb/host/xhci.c      | 17 +++++++++++++++++
 drivers/usb/host/xhci.h      |  3 +++
 4 files changed, 35 insertions(+), 1 deletion(-)

diff --git a/drivers/usb/host/xhci-rcar.c b/drivers/usb/host/xhci-rcar.c
index 25ce3d78bba8..c7715bbbd4a4 100644
--- a/drivers/usb/host/xhci-rcar.c
+++ b/drivers/usb/host/xhci-rcar.c
@@ -257,6 +257,13 @@ static const struct xhci_plat_priv xhci_plat_renesas_rcar_gen3 = {
 };
 
 static const struct xhci_plat_priv xhci_plat_renesas_rzv2m = {
+	.quirks = XHCI_USE_EXTENDED_ADDR | XHCI_TRUST_TX_LENGTH |
+		  XHCI_SLOW_SUSPEND,
+	.init_quirk = xhci_rzv2m_init_quirk,
+	.plat_start = xhci_rzv2m_start,
+};
+
+static const struct xhci_plat_priv xhci_plat_renesas_rzv2ma = {
 	.quirks = XHCI_NO_64BIT_SUPPORT | XHCI_TRUST_TX_LENGTH |
 		  XHCI_SLOW_SUSPEND,
 	.init_quirk = xhci_rzv2m_init_quirk,
@@ -290,7 +297,7 @@ static const struct of_device_id usb_xhci_of_match[] = {
 		.data = &xhci_plat_renesas_rzv2m,
         }, {
                 .compatible = "renesas,rzv2ma-xhci",
-                .data = &xhci_plat_renesas_rzv2m,
+                .data = &xhci_plat_renesas_rzv2ma,
         },
 	{ },
 };
diff --git a/drivers/usb/host/xhci-ring.c b/drivers/usb/host/xhci-ring.c
index 5ee095a5d38a..c07797c8f3d4 100644
--- a/drivers/usb/host/xhci-ring.c
+++ b/drivers/usb/host/xhci-ring.c
@@ -608,6 +608,8 @@ void xhci_find_new_dequeue_state(struct xhci_hcd *xhci,
 			"Finding endpoint context");
 
 	hw_dequeue = xhci_get_hw_deq(xhci, dev, ep_index, stream_id);
+	if (xhci->quirks & XHCI_USE_EXTENDED_ADDR)
+		hw_dequeue |= xhci->extended_addr;
 	new_seg = ep_ring->deq_seg;
 	new_deq = ep_ring->dequeue;
 
@@ -1580,12 +1582,15 @@ static void handle_cmd_completion(struct xhci_hcd *xhci,
 	u32 cmd_type;
 
 	cmd_dma = le64_to_cpu(event->cmd_trb);
+	if (xhci->quirks & XHCI_USE_EXTENDED_ADDR)
+		cmd_dma |= xhci->extended_addr;
 	cmd_trb = xhci->cmd_ring->dequeue;
 
 	trace_xhci_handle_command(xhci->cmd_ring, &cmd_trb->generic);
 
 	cmd_dequeue_dma = xhci_trb_virt_to_dma(xhci->cmd_ring->deq_seg,
 			cmd_trb);
+
 	/*
 	 * Check whether the completion event is for our internal kept
 	 * command.
@@ -2434,6 +2439,8 @@ static int handle_tx_event(struct xhci_hcd *xhci,
 	ep_index = TRB_TO_EP_ID(le32_to_cpu(event->flags)) - 1;
 	trb_comp_code = GET_COMP_CODE(le32_to_cpu(event->transfer_len));
 	ep_trb_dma = le64_to_cpu(event->buffer);
+	if (xhci->quirks & XHCI_USE_EXTENDED_ADDR)
+		ep_trb_dma |= xhci->extended_addr;
 
 	ep = xhci_get_virt_ep(xhci, slot_id, ep_index);
 	if (!ep) {
diff --git a/drivers/usb/host/xhci.c b/drivers/usb/host/xhci.c
index b069fe3f8ab0..48e507fd88cc 100644
--- a/drivers/usb/host/xhci.c
+++ b/drivers/usb/host/xhci.c
@@ -5329,6 +5329,23 @@ int xhci_gen_setup(struct usb_hcd *hcd, xhci_get_quirks_t get_quirks)
 	if (xhci->quirks & XHCI_NO_64BIT_SUPPORT)
 		xhci->hcc_params &= ~BIT(0);
 
+	/*
+	 * On some xHCI controllers (e.g. RZ/V2M), the AC64 bit (bit 0) of
+	 * HCCPARAMS1 is set to 0 to support only 32-bit address pointers.
+	 * However, it has some extended address registers to extend
+	 * 32-bit memory address address to 34-bit memory address to let
+	 * the controller can access to over 32-bit address memory region.
+	 */
+	if (xhci->quirks & XHCI_USE_EXTENDED_ADDR) {
+		xhci->hcc_params |= BIT(0);
+		retval = of_property_read_u64(dev->of_node, "32-bit-extended-addr",
+					      &xhci->extended_addr);
+		if (retval) {
+			xhci_err(xhci, "Miss 32-bit-extended-addr property\n");
+			return retval;
+		}
+	}
+
 	/* Set dma_mask and coherent_dma_mask to 64-bits,
 	 * if xHC supports 64-bit addressing */
 	if (HCC_64BIT_ADDR(xhci->hcc_params) &&
diff --git a/drivers/usb/host/xhci.h b/drivers/usb/host/xhci.h
index bb3c362a194b..48aeacac5d8e 100644
--- a/drivers/usb/host/xhci.h
+++ b/drivers/usb/host/xhci.h
@@ -1896,6 +1896,8 @@ struct xhci_hcd {
 #define XHCI_RESET_TO_DEFAULT	BIT_ULL(44)
 #define XHCI_ZHAOXIN_TRB_FETCH	BIT_ULL(45)
 #define XHCI_ZHAOXIN_HOST	BIT_ULL(46)
+/* For controller needs to use 64 bits extended addresses */
+#define XHCI_USE_EXTENDED_ADDR	BIT_ULL(47)
 
 	unsigned int		num_active_eps;
 	unsigned int		limit_active_eps;
@@ -1924,6 +1926,7 @@ struct xhci_hcd {
 	struct list_head	regset_list;
 
 	void			*dbc;
+	u64			extended_addr;
 	/* platform-specific data -- must come last */
 	unsigned long		priv[] __aligned(sizeof(s64));
 };
-- 
2.25.1

