From b92cf419ab258f86f5eb7dc6c4a75ddd85ede6ad Mon Sep 17 00:00:00 2001
From: Tai Huynh <tai.huynh.cp@renesas.com>
Date: Thu, 13 Jun 2024 10:33:02 +0700
Subject: [PATCH 2/2] net: ethernet: renesas: ravb: add code to access over 32
 bits memory region for RZ/V2M

RZ/V2M only supports over 32 bits memory region in Linux.
To support ethernet can work with this region, extended memory
access is applied although RZ/V2M xHCI controller can not access to
64 bits memory.
It will switch bank 0 (0x0 - 0xFFFF_FFFF) address to
bank 1 address (0x1_0000_0000 - 0x1_FFFF_FFFF) by SYS that was set
before.

Signed-off-by: Tai Huynh <tai.huynh.cp@renesas.com>
---
 drivers/net/ethernet/renesas/ravb.h      |  2 +
 drivers/net/ethernet/renesas/ravb_main.c | 94 ++++++++++++++++++++++--
 2 files changed, 89 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/renesas/ravb.h b/drivers/net/ethernet/renesas/ravb.h
index b9c87c8aa2e8..f818187c0c29 100644
--- a/drivers/net/ethernet/renesas/ravb.h
+++ b/drivers/net/ethernet/renesas/ravb.h
@@ -1064,6 +1064,8 @@ struct ravb_hw_info {
 	u32 tccr_mask;
 	u32 rx_max_buf_size;
 	unsigned aligned_tx: 1;
+	unsigned use_64_bit_dma: 1;	/* Use 64-bit for DMA descriptor */
+	u64 extended_addr;		/* Use 64-bit for DMA descriptor */
 
 	/* hardware features */
 	unsigned internal_delay:1;	/* AVB-DMAC has internal delays */
diff --git a/drivers/net/ethernet/renesas/ravb_main.c b/drivers/net/ethernet/renesas/ravb_main.c
index 55c23c536fb5..b0a956745dc9 100644
--- a/drivers/net/ethernet/renesas/ravb_main.c
+++ b/drivers/net/ethernet/renesas/ravb_main.c
@@ -193,6 +193,7 @@ static const struct mdiobb_ops bb_ops = {
 static int ravb_tx_free(struct net_device *ndev, int q, bool free_txed_only)
 {
 	struct ravb_private *priv = netdev_priv(ndev);
+	const struct ravb_hw_info *info = priv->info;
 	struct net_device_stats *stats = &priv->stats[q];
 	unsigned int num_tx_desc = priv->num_tx_desc;
 	struct ravb_tx_desc *desc;
@@ -214,7 +215,11 @@ static int ravb_tx_free(struct net_device *ndev, int q, bool free_txed_only)
 		size = le16_to_cpu(desc->ds_tagl) & TX_DS;
 		/* Free the original skb. */
 		if (priv->tx_skb[q][entry / num_tx_desc]) {
-			dma_unmap_single(ndev->dev.parent, le32_to_cpu(desc->dptr),
+			if (info->use_64_bit_dma) /* Try 64-bit mask if hardware is capable of it */
+			        dma_unmap_single(ndev->dev.parent, info->extended_addr | le32_to_cpu(desc->dptr),
+			                          size, DMA_TO_DEVICE);
+			else
+				dma_unmap_single(ndev->dev.parent, le32_to_cpu(desc->dptr),
 					 size, DMA_TO_DEVICE);
 			/* Last packet descriptor? */
 			if (entry % num_tx_desc == num_tx_desc - 1) {
@@ -236,6 +241,7 @@ static int ravb_tx_free(struct net_device *ndev, int q, bool free_txed_only)
 static void ravb_rx_ring_free_gbeth(struct net_device *ndev, int q)
 {
 	struct ravb_private *priv = netdev_priv(ndev);
+	const struct ravb_hw_info *info = priv->info;
 	unsigned int ring_size;
 	unsigned int i;
 
@@ -245,6 +251,15 @@ static void ravb_rx_ring_free_gbeth(struct net_device *ndev, int q)
 	for (i = 0; i < priv->num_rx_ring[q]; i++) {
 		struct ravb_rx_desc *desc = &priv->gbeth_rx_ring[i];
 
+	if (info->use_64_bit_dma) { /* Try 64-bit mask if hardware is capable of it */
+	         if (!dma_mapping_error(ndev->dev.parent,
+	                                info->extended_addr | le32_to_cpu(desc->dptr)))
+	                 dma_unmap_single(ndev->dev.parent,
+	                                  info->extended_addr | le32_to_cpu(desc->dptr),
+	                                  RX_BUF_SZ,
+	                                  DMA_FROM_DEVICE);
+	}
+	else {
 		if (!dma_mapping_error(ndev->dev.parent,
 				       le32_to_cpu(desc->dptr)))
 			dma_unmap_single(ndev->dev.parent,
@@ -252,6 +267,7 @@ static void ravb_rx_ring_free_gbeth(struct net_device *ndev, int q)
 					 GBETH_RX_BUFF_MAX,
 					 DMA_FROM_DEVICE);
 	}
+	}
 	ring_size = sizeof(struct ravb_rx_desc) * (priv->num_rx_ring[q] + 1);
 	dma_free_coherent(ndev->dev.parent, ring_size, priv->gbeth_rx_ring,
 			  priv->rx_desc_dma[q]);
@@ -261,6 +277,7 @@ static void ravb_rx_ring_free_gbeth(struct net_device *ndev, int q)
 static void ravb_rx_ring_free_rcar(struct net_device *ndev, int q)
 {
 	struct ravb_private *priv = netdev_priv(ndev);
+	const struct ravb_hw_info *info = priv->info;
 	unsigned int ring_size;
 	unsigned int i;
 
@@ -270,6 +287,15 @@ static void ravb_rx_ring_free_rcar(struct net_device *ndev, int q)
 	for (i = 0; i < priv->num_rx_ring[q]; i++) {
 		struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];
 
+	if (info->use_64_bit_dma) { /* Try 64-bit mask if hardware is capable of it */
+                if (!dma_mapping_error(ndev->dev.parent,
+                                         info->extended_addr | le32_to_cpu(desc->dptr)))
+                        dma_unmap_single(ndev->dev.parent,
+                                         info->extended_addr | le32_to_cpu(desc->dptr),
+                                         RX_BUF_SZ,
+                                         DMA_FROM_DEVICE);
+        }
+        else {
 		if (!dma_mapping_error(ndev->dev.parent,
 				       le32_to_cpu(desc->dptr)))
 			dma_unmap_single(ndev->dev.parent,
@@ -277,6 +303,7 @@ static void ravb_rx_ring_free_rcar(struct net_device *ndev, int q)
 					 RX_BUF_SZ,
 					 DMA_FROM_DEVICE);
 	}
+	}
 	ring_size = sizeof(struct ravb_ex_rx_desc) *
 		    (priv->num_rx_ring[q] + 1);
 	dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],
@@ -995,9 +1022,14 @@ static bool ravb_rx_rcar(struct net_device *ndev, int *quota, int q)
 
 			skb = priv->rx_skb[q][entry];
 			priv->rx_skb[q][entry] = NULL;
-			dma_unmap_single(ndev->dev.parent, le32_to_cpu(desc->dptr),
-					 RX_BUF_SZ,
-					 DMA_FROM_DEVICE);
+			if (info->use_64_bit_dma) /* Try 64-bit mask if hardware is capable of it */
+				dma_unmap_single(ndev->dev.parent, info->extended_addr | le32_to_cpu(desc->dptr),
+				                 RX_BUF_SZ,
+				                 DMA_FROM_DEVICE);
+			else
+				dma_unmap_single(ndev->dev.parent, le32_to_cpu(desc->dptr),
+						 RX_BUF_SZ,
+						 DMA_FROM_DEVICE);
 			get_ts &= (q == RAVB_NC) ?
 					RAVB_RXTSTAMP_TYPE_V2_L2_EVENT :
 					~RAVB_RXTSTAMP_TYPE_V2_L2_EVENT;
@@ -2033,7 +2065,7 @@ static netdev_tx_t ravb_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 	struct ravb_tstamp_skb *ts_skb;
 	struct ravb_tx_desc *desc;
 	unsigned long flags;
-	u32 dma_addr;
+	dma_addr_t dma_addr;
 	void *buffer;
 	u32 entry;
 	u32 len;
@@ -2087,6 +2119,9 @@ static netdev_tx_t ravb_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 
 		desc = &priv->tx_ring[q][entry];
 		desc->ds_tagl = cpu_to_le16(len);
+		if (info->use_64_bit_dma) /* Try 64-bit mask if hardware is capable of it */
+		desc->dptr = cpu_to_le32((u32)dma_addr);
+		else
 		desc->dptr = cpu_to_le32(dma_addr);
 
 		buffer = skb->data + len;
@@ -2155,7 +2190,11 @@ static netdev_tx_t ravb_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 	return NETDEV_TX_OK;
 
 unmap:
-	dma_unmap_single(ndev->dev.parent, le32_to_cpu(desc->dptr),
+	if (info->use_64_bit_dma) /* Try 64-bit mask if hardware is capable of it */
+	        dma_unmap_single(ndev->dev.parent, info->extended_addr | le32_to_cpu(desc->dptr),
+	                         le16_to_cpu(desc->ds_tagl), DMA_TO_DEVICE);
+	else
+		dma_unmap_single(ndev->dev.parent, le32_to_cpu(desc->dptr),
 			 le16_to_cpu(desc->ds_tagl), DMA_TO_DEVICE);
 drop:
 	dev_kfree_skb_any(skb);
@@ -2619,6 +2658,32 @@ static const struct ravb_hw_info ravb_rzv2m_hw_info = {
 	.gptp_ref_clk = 1,
 	.nc_queues = 1,
 	.magic_pkt = 1,
+	.use_64_bit_dma = 1,
+};
+
+static const struct ravb_hw_info ravb_rzv2ma_hw_info = {
+        .rx_ring_free = ravb_rx_ring_free_rcar,
+        .rx_ring_format = ravb_rx_ring_format_rcar,
+        .alloc_rx_desc = ravb_alloc_rx_desc_rcar,
+        .receive = ravb_rx_rcar,
+        .set_rate = ravb_set_rate_rcar,
+        .set_feature = ravb_set_features_rcar,
+        .dmac_init = ravb_dmac_init_rcar,
+        .emac_init = ravb_emac_init_rcar,
+        .gstrings_stats = ravb_gstrings_stats,
+        .gstrings_size = sizeof(ravb_gstrings_stats),
+        .net_hw_features = NETIF_F_RXCSUM,
+        .net_features = NETIF_F_RXCSUM,
+        .stats_len = ARRAY_SIZE(ravb_gstrings_stats),
+        .max_rx_len = RX_BUF_SZ + RAVB_ALIGN - 1,
+        .tccr_mask = TCCR_TSRQ0 | TCCR_TSRQ1 | TCCR_TSRQ2 | TCCR_TSRQ3,
+        .rx_max_buf_size = SZ_2K,
+        .multi_irqs = 1,
+        .err_mgmt_irqs = 1,
+        .gptp = 1,
+        .gptp_ref_clk = 1,
+        .nc_queues = 1,
+        .magic_pkt = 1,
 };
 
 static const struct ravb_hw_info gbeth_hw_info = {
@@ -2656,7 +2721,7 @@ static const struct of_device_id ravb_match_table[] = {
 	{ .compatible = "renesas,etheravb-r8a7795", .data = &ravb_gen3_hw_info },
 	{ .compatible = "renesas,etheravb-rcar-gen3", .data = &ravb_gen3_hw_info },
 	{ .compatible = "renesas,etheravb-rzv2m", .data = &ravb_rzv2m_hw_info },
-	{ .compatible = "renesas,etheravb-rzv2ma", .data = &ravb_rzv2m_hw_info },
+	{ .compatible = "renesas,etheravb-rzv2ma", .data = &ravb_rzv2ma_hw_info },
 	{ .compatible = "renesas,rzg2l-gbeth", .data = &gbeth_hw_info },
 	{ }
 };
@@ -2784,6 +2849,21 @@ static int ravb_probe(struct platform_device *pdev)
 
 	info = of_device_get_match_data(&pdev->dev);
 
+	/* Try 64-bit mask if hardware is capable of it */
+	if (info->use_64_bit_dma) {
+	        error = dma_set_mask_and_coherent(&pdev->dev, DMA_BIT_MASK(64));
+	        if (error)
+	                goto out_free_netdev;
+
+		error = of_property_read_u64(np, "32-bit-extended-addr",
+					&info->extended_addr);
+		if (error) {
+                	dev_err(&pdev->dev,
+                        	"Miss 32-bit-extended-addr property\n");
+			return error;
+		}
+	}
+
 	ndev->features = info->net_features;
 	ndev->hw_features = info->net_hw_features;
 
-- 
2.25.1

