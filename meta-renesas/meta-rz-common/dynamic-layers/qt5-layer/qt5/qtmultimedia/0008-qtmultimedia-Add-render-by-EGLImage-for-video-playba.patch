From f9882805a4ebc7fece0769015339f87d11ef035a Mon Sep 17 00:00:00 2001
From: Huynh Thanh Hung <hung.huynh.wz@renesas.com>
Date: Mon, 16 Aug 2021 16:58:31 +0700
Subject: [PATCH] qtmultimedia: Add render by EGLImage for video playback

Improve video playback peformance by creating EGLImage which wrap the
video buffer.
texturing by glEGLImageTargetTexture2DOES() can prvent buffer copy

When enable this feature by macro EGLIMAGE_USING, qt rendersink only
support for NV12 and BGRA format.

Signed-off-by: Huynh Thanh Hung <hung.huynh.wz@renesas.com>
---
 src/gsttools/gsttools.pro                     |   1 +
 src/gsttools/qgstutils.cpp                    |   1 +
 .../qsgvideonode_p.h                          |   4 +
 src/plugins/videonode/egl/qsgvideonode_egl.h  |   4 +-
 .../qdeclarativevideooutput_render.cpp        |  16 ++
 .../qdeclarativevideooutput_render_p.h        |   3 +
 .../qsgvideonode_rgb.cpp                      | 167 ++++++++++++++++-
 .../qsgvideonode_rgb_p.h                      |   3 +
 .../qsgvideonode_texture_p.h                  |   3 +
 .../qsgvideonode_yuv.cpp                      | 172 ++++++++++++++++++
 .../qsgvideonode_yuv_p.h                      |   3 +
 .../qtmultimediaquicktools.pro                |   5 +-
 .../shaders/biplanaryuvvideo.frag             |   8 +-
 13 files changed, 383 insertions(+), 7 deletions(-)

diff --git a/src/gsttools/gsttools.pro b/src/gsttools/gsttools.pro
index dee1cbf3..8b7d5af9 100644
--- a/src/gsttools/gsttools.pro
+++ b/src/gsttools/gsttools.pro
@@ -142,3 +142,4 @@ target.path = $$[QT_INSTALL_LIBS]
 INSTALLS += target
 
 LIBS_PRIVATE += -lgstallocators-$$GST_VERSION
+DEFINES += EGLIMAGE_USING
diff --git a/src/gsttools/qgstutils.cpp b/src/gsttools/qgstutils.cpp
index b9e04e3f..749208b7 100644
--- a/src/gsttools/qgstutils.cpp
+++ b/src/gsttools/qgstutils.cpp
@@ -916,6 +916,7 @@ struct VideoFormat
 
 static const VideoFormat qt_videoFormatLookup[] =
 {
+    { QVideoFrame::Format_BGRA32 , GST_VIDEO_FORMAT_BGRA },
     { QVideoFrame::Format_YUV420P, GST_VIDEO_FORMAT_I420 },
     { QVideoFrame::Format_YV12   , GST_VIDEO_FORMAT_YV12 },
     { QVideoFrame::Format_UYVY   , GST_VIDEO_FORMAT_UYVY },
diff --git a/src/multimedia/qtmultimediaquicktools_headers/qsgvideonode_p.h b/src/multimedia/qtmultimediaquicktools_headers/qsgvideonode_p.h
index 3024d131..7e8ec9b0 100644
--- a/src/multimedia/qtmultimediaquicktools_headers/qsgvideonode_p.h
+++ b/src/multimedia/qtmultimediaquicktools_headers/qsgvideonode_p.h
@@ -70,6 +70,10 @@ public:
 
     void setTexturedRectGeometry(const QRectF &boundingRect, const QRectF &textureRect, int orientation);
 
+#ifdef EGLIMAGE_USING
+    virtual void destroyEglImage() = 0;
+#endif
+
 private:
     QRectF m_rect;
     QRectF m_textureRect;
diff --git a/src/plugins/videonode/egl/qsgvideonode_egl.h b/src/plugins/videonode/egl/qsgvideonode_egl.h
index b721c67d..6c90c2ae 100644
--- a/src/plugins/videonode/egl/qsgvideonode_egl.h
+++ b/src/plugins/videonode/egl/qsgvideonode_egl.h
@@ -77,7 +77,9 @@ public:
     void setCurrentFrame(const QVideoFrame &frame, FrameFlags flags);
     QVideoFrame::PixelFormat pixelFormat() const;
     QAbstractVideoBuffer::HandleType handleType() const;
-
+#ifdef EGLIMAGE_USING
+    virtual void destroyEglImage(){};
+#endif
 private:
     QSGVideoMaterial_EGL m_material;
     QVideoFrame::PixelFormat m_pixelFormat;
diff --git a/src/qtmultimediaquicktools/qdeclarativevideooutput_render.cpp b/src/qtmultimediaquicktools/qdeclarativevideooutput_render.cpp
index fbe8a62f..10594644 100644
--- a/src/qtmultimediaquicktools/qdeclarativevideooutput_render.cpp
+++ b/src/qtmultimediaquicktools/qdeclarativevideooutput_render.cpp
@@ -80,6 +80,9 @@ QDeclarativeVideoRendererBackend::QDeclarativeVideoRendererBackend(QDeclarativeV
     m_videoNodeFactories.append(&m_i420Factory);
     m_videoNodeFactories.append(&m_rgbFactory);
     m_videoNodeFactories.append(&m_textureFactory);
+#ifdef EGLIMAGE_USING
+	m_videoNode = NULL;
+#endif
 }
 
 QDeclarativeVideoRendererBackend::~QDeclarativeVideoRendererBackend()
@@ -356,6 +359,9 @@ QSGNode *QDeclarativeVideoRendererBackend::updatePaintNode(QSGNode *oldNode,
         //don't keep the frame for more than really necessary
         m_frameChanged = false;
         m_frame = QVideoFrame();
+#ifdef EGLIMAGE_USING
+	m_videoNode = videoNode;
+#endif
     }
     return videoNode;
 }
@@ -399,6 +405,12 @@ void QDeclarativeVideoRendererBackend::present(const QVideoFrame &frame)
 void QDeclarativeVideoRendererBackend::stop()
 {
     present(QVideoFrame());
+#ifdef EGLIMAGE_USING
+    if(m_videoNode != NULL) {
+        m_videoNode->destroyEglImage();
+        m_videoNode = NULL;
+    }
+#endif
 }
 
 QSGVideoItemSurface::QSGVideoItemSurface(QDeclarativeVideoRendererBackend *backend, QObject *parent)
@@ -427,8 +439,12 @@ QList<QVideoFrame::PixelFormat> QSGVideoItemSurface::supportedPixelFormats(
             return formats;
     }
 
+#ifdef EGLIMAGE_USING
+    formats << QVideoFrame::Format_NV12 << QVideoFrame::Format_BGRA32;
+#else
     foreach (QSGVideoNodeFactoryInterface* factory, m_backend->m_videoNodeFactories)
         formats.append(factory->supportedPixelFormats(handleType));
+#endif
 
     return formats;
 }
diff --git a/src/qtmultimediaquicktools/qdeclarativevideooutput_render_p.h b/src/qtmultimediaquicktools/qdeclarativevideooutput_render_p.h
index e05adc3b..87a543f8 100644
--- a/src/qtmultimediaquicktools/qdeclarativevideooutput_render_p.h
+++ b/src/qtmultimediaquicktools/qdeclarativevideooutput_render_p.h
@@ -111,6 +111,9 @@ private:
         QVideoFilterRunnable *runnable;
     };
     QList<Filter> m_filters;
+#ifdef EGLIMAGE_USING
+    QSGVideoNode *m_videoNode;
+#endif
 };
 
 class QSGVideoItemSurface : public QAbstractVideoSurface
diff --git a/src/qtmultimediaquicktools/qsgvideonode_rgb.cpp b/src/qtmultimediaquicktools/qsgvideonode_rgb.cpp
index 1ba8f98b..e551a0b9 100644
--- a/src/qtmultimediaquicktools/qsgvideonode_rgb.cpp
+++ b/src/qtmultimediaquicktools/qsgvideonode_rgb.cpp
@@ -37,9 +37,36 @@
 #include <QtGui/QOpenGLContext>
 #include <QtGui/QOpenGLFunctions>
 #include <QtGui/QOpenGLShaderProgram>
+#include <QApplication>
+#include <qpa/qplatformintegration.h>
+#include <qpa/qplatformnativeinterface.h>
+#include "private/qguiapplication_p.h"
+#include <QtCore/qloggingcategory.h>
+#include <unistd.h>
+#include <sys/time.h>
+#include <drm/drm_fourcc.h>
+extern "C"
+{
+       #include "GLES2/gl2.h"
+       #include "GLES2/gl2ext.h"
+       #include "EGL/egl.h"
+       #include "EGL/eglext.h"
+}
+static int re_texture;
+
+#ifdef EGLIMAGE_USING
+struct EGLImage_arr {
+    struct EGLImage_arr * next;
+    EGLImageKHR eglimage;
+    void * buffer;
+    int fd;
+};
+#endif
 
 QT_BEGIN_NAMESPACE
 
+Q_DECLARE_LOGGING_CATEGORY(qLcVideo)
+
 QList<QVideoFrame::PixelFormat> QSGVideoNodeFactory_RGB::supportedPixelFormats(
                                         QAbstractVideoBuffer::HandleType handleType) const
 {
@@ -58,6 +85,7 @@ QList<QVideoFrame::PixelFormat> QSGVideoNodeFactory_RGB::supportedPixelFormats(
 
 QSGVideoNode *QSGVideoNodeFactory_RGB::createNode(const QVideoSurfaceFormat &format)
 {
+    re_texture = 1;
     if (supportedPixelFormats(format.handleType()).contains(format.pixelFormat()))
         return new QSGVideoNode_RGB(format);
 
@@ -125,6 +153,18 @@ public:
         m_width(1.0)
     {
         setFlag(Blending, false);
+#ifdef EGLIMAGE_USING
+        QPlatformNativeInterface* nativeInterface = QGuiApplicationPrivate::platformIntegration()->nativeInterface();
+        Q_ASSERT(nativeInterface);
+        eglCreateImageKHR  = (EGLCREATEIMAGEKHR)eglGetProcAddress("eglCreateImageKHR");
+        eglDestroyImageKHR = (EGLDESTROYIMAGEKHR)eglGetProcAddress("eglDestroyImageKHR");
+        glEGLImageTargetTexture2D = (GLEGLIMAGETARGETRENDERBUFFERSTORAGEOES)eglGetProcAddress("glEGLImageTargetTexture2DOES");
+        eglDisplay = nativeInterface->nativeResourceForIntegration("egldisplay");
+        if(eglDisplay == EGL_NO_DISPLAY) printf("eglGetDisplay failed.\n");
+
+        eglimage_arr = NULL;
+#endif
+
     }
 
     ~QSGVideoMaterial_RGB()
@@ -161,6 +201,76 @@ public:
         m_frame = frame;
     }
 
+#ifdef EGLIMAGE_USING
+    struct EGLImage_arr * set_current_eglimage(struct EGLImage_arr * top)
+    {
+        struct EGLImage_arr *cur = top;
+        struct EGLImage_arr *tmp;
+        uintptr_t offset;
+
+        while (cur != NULL) {
+            if(cur->buffer == m_frame.bits() && cur->fd == m_frame.fd()) {
+                eglimage = cur->eglimage;
+                return top;
+            }
+            cur = cur->next;
+        }
+
+        offset = reinterpret_cast<uintptr_t>(m_frame.bits());
+        offset = offset & (getpagesize() - 1);
+
+        int attrib[] = {
+                   EGL_WIDTH, m_textureSize.width(),
+                   EGL_HEIGHT, m_textureSize.height(),
+                   EGL_LINUX_DRM_FOURCC_EXT, DRM_FORMAT_ARGB8888,
+                   EGL_DMA_BUF_PLANE0_FD_EXT, m_frame.fd(),
+                   EGL_DMA_BUF_PLANE0_OFFSET_EXT, (int)offset,
+                   EGL_DMA_BUF_PLANE0_PITCH_EXT, m_frame.bytesPerLine(),
+                   EGL_NONE,
+        };
+
+        tmp = (struct EGLImage_arr *)malloc(sizeof (struct EGLImage_arr));
+        memset(tmp,0,sizeof (struct EGLImage_arr));
+
+        tmp->fd = m_frame.fd();
+        tmp->eglimage = eglCreateImageKHR(eglDisplay,
+                                            EGL_NO_CONTEXT,
+                                            EGL_LINUX_DMA_BUF_EXT,
+                                            NULL, attrib);
+        tmp->buffer = (void *)m_frame.bits();
+
+        if (tmp->eglimage == EGL_NO_IMAGE_KHR)
+        {
+            qCDebug(qLcVideo) << "eglCreateImageKHR failed for RGB format with target EGL_LINUX_DMA_BUF_EXT. "
+			      << qPrintable(QString::number(eglGetError(), 16));
+            free(tmp);
+            eglimage = top != NULL ? top->eglimage : EGL_NO_IMAGE_KHR;
+            return top;
+        } else {
+	    qCDebug(qLcVideo) << "eglCreateImageKHR success for RGB format with fd =" << tmp->fd;
+	}
+
+        eglimage = tmp->eglimage;
+        tmp->next = top;
+
+        return tmp;
+    }
+
+    void destroyEglImage()
+    {
+        struct EGLImage_arr *tmp;
+
+        while (eglimage_arr != NULL) {
+            if(eglimage_arr->eglimage) {
+                eglDestroyImageKHR(eglDisplay, eglimage_arr->eglimage);
+            }
+            tmp = eglimage_arr;
+            eglimage_arr = eglimage_arr->next;
+            free (tmp);
+        }
+    }
+#endif
+
     void bind()
     {
         QOpenGLFunctions *functions = QOpenGLContext::currentContext()->functions();
@@ -187,7 +297,24 @@ public:
                         functions->glDeleteTextures(1, &m_textureId);
                     functions->glGenTextures(1, &m_textureId);
                     m_textureSize = textureSize;
+#ifdef EGLIMAGE_USING
+                    eglimage_arr = set_current_eglimage(eglimage_arr);
+#endif
                 }
+#ifdef EGLIMAGE_USING
+                if (eglimage_arr != NULL) {
+                    eglimage_arr = set_current_eglimage(eglimage_arr);
+                    functions->glActiveTexture(GL_TEXTURE0);
+                    functions->glBindTexture(GL_TEXTURE_2D, m_textureId);
+
+                    glEGLImageTargetTexture2D(GL_TEXTURE_2D, eglimage);
+                    GLint glerr = glGetError();
+                    if(glerr)
+			qCDebug(qLcVideo) << "<ERROR name=\"CreateTextureEGLImage\" glerr=" << qPrintable(QString::number(glerr, 16));
+
+                }
+                else {
+#endif
 
                 GLint dataType = GL_UNSIGNED_BYTE;
                 GLint dataFormat = GL_RGBA;
@@ -203,12 +330,26 @@ public:
 
                 functions->glActiveTexture(GL_TEXTURE0);
                 functions->glBindTexture(GL_TEXTURE_2D, m_textureId);
-                functions->glTexImage2D(GL_TEXTURE_2D, 0, dataFormat,
+                if (re_texture) {
+                       functions->glTexImage2D(GL_TEXTURE_2D, 0, dataFormat,
                                         m_textureSize.width(), m_textureSize.height(),
                                         0, dataFormat, dataType, m_frame.bits());
+			re_texture = 0;
+		}
+		else{
+			functions->glTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0,
+					m_textureSize.width(), m_textureSize.height(),
+					dataFormat, dataType, m_frame.bits());
+			if (GL_NO_ERROR != functions->glGetError())
+			    functions->glTexImage2D(GL_TEXTURE_2D, 0, dataFormat,
+					m_textureSize.width(), m_textureSize.height(),
+					0, dataFormat, dataType, m_frame.bits());
+			}
 
                 functions->glPixelStorei(GL_UNPACK_ALIGNMENT, previousAlignment);
-
+#ifdef EGLIMAGE_USING
+		}
+#endif
                 functions->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
                 functions->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
                 functions->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
@@ -236,6 +377,21 @@ private:
         return m_format.pixelFormat() == QVideoFrame::Format_RGB32
                 || m_format.pixelFormat() == QVideoFrame::Format_ARGB32;
     }
+#ifdef EGLIMAGE_USING
+    EGLImageKHR        eglimage = EGL_NO_IMAGE_KHR;
+    EGLDisplay eglDisplay;
+    QPlatformNativeInterface* nativeInterface;
+
+    // /* EGL image function */
+    typedef EGLImageKHR (*EGLCREATEIMAGEKHR)(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, EGLint* attr_list);
+    typedef EGLBoolean (*EGLDESTROYIMAGEKHR)(EGLDisplay dpy, EGLImageKHR image);
+    EGLCREATEIMAGEKHR eglCreateImageKHR;
+    EGLDESTROYIMAGEKHR eglDestroyImageKHR;
+    // /* EGL image to texture image function */
+    typedef void (*GLEGLIMAGETARGETRENDERBUFFERSTORAGEOES)(GLenum target, GLeglImageOES image);
+    GLEGLIMAGETARGETRENDERBUFFERSTORAGEOES glEGLImageTargetTexture2D;
+    struct EGLImage_arr *eglimage_arr;
+#endif
 };
 
 
@@ -257,6 +413,13 @@ void QSGVideoNode_RGB::setCurrentFrame(const QVideoFrame &frame, FrameFlags)
     markDirty(DirtyMaterial);
 }
 
+#ifdef EGLIMAGE_USING
+void QSGVideoNode_RGB::destroyEglImage()
+{
+    m_material->destroyEglImage();
+}
+#endif
+
 void QSGVideoMaterialShader_RGB::updateState(const RenderState &state,
                                                 QSGMaterial *newMaterial,
                                                 QSGMaterial *oldMaterial)
diff --git a/src/qtmultimediaquicktools/qsgvideonode_rgb_p.h b/src/qtmultimediaquicktools/qsgvideonode_rgb_p.h
index 501df9cb..134f7770 100644
--- a/src/qtmultimediaquicktools/qsgvideonode_rgb_p.h
+++ b/src/qtmultimediaquicktools/qsgvideonode_rgb_p.h
@@ -65,6 +65,9 @@ public:
         return QAbstractVideoBuffer::NoHandle;
     }
     void setCurrentFrame(const QVideoFrame &frame, FrameFlags flags);
+#ifdef EGLIMAGE_USING
+    void destroyEglImage();
+#endif
 
 private:
     QVideoSurfaceFormat m_format;
diff --git a/src/qtmultimediaquicktools/qsgvideonode_texture_p.h b/src/qtmultimediaquicktools/qsgvideonode_texture_p.h
index 0304b2ef..3993ce56 100644
--- a/src/qtmultimediaquicktools/qsgvideonode_texture_p.h
+++ b/src/qtmultimediaquicktools/qsgvideonode_texture_p.h
@@ -65,6 +65,9 @@ public:
         return QAbstractVideoBuffer::GLTextureHandle;
     }
     void setCurrentFrame(const QVideoFrame &frame, FrameFlags flags);
+#ifdef EGLIMAGE_USING
+    virtual void destroyEglImage(){};
+#endif
 
 private:
     QVideoSurfaceFormat m_format;
diff --git a/src/qtmultimediaquicktools/qsgvideonode_yuv.cpp b/src/qtmultimediaquicktools/qsgvideonode_yuv.cpp
index b2979f50..30726da6 100644
--- a/src/qtmultimediaquicktools/qsgvideonode_yuv.cpp
+++ b/src/qtmultimediaquicktools/qsgvideonode_yuv.cpp
@@ -37,9 +37,34 @@
 #include <QtGui/QOpenGLContext>
 #include <QtGui/QOpenGLFunctions>
 #include <QtGui/QOpenGLShaderProgram>
+#include <QApplication>
+#include <qpa/qplatformintegration.h>
+#include <qpa/qplatformnativeinterface.h>
+#include "private/qguiapplication_p.h"
+#include <QtCore/qloggingcategory.h>
+#include <unistd.h>
+#include <drm/drm_fourcc.h>
+extern "C"
+{
+       #include "GLES2/gl2.h"
+       #include "GLES2/gl2ext.h"
+       #include "EGL/egl.h"
+       #include "EGL/eglext.h"
+}
+
+#ifdef EGLIMAGE_USING
+struct EGLImage_arr {
+    struct EGLImage_arr * next;
+    EGLImageKHR eglimage;
+    int fd[3];
+};
+#endif
+int eglimage_used;
 
 QT_BEGIN_NAMESPACE
 
+Q_DECLARE_LOGGING_CATEGORY(qLcVideo)
+
 QList<QVideoFrame::PixelFormat> QSGVideoNodeFactory_YUV::supportedPixelFormats(
                                         QAbstractVideoBuffer::HandleType handleType) const
 {
@@ -92,6 +117,9 @@ protected:
         m_id_plane2Texture = program()->uniformLocation("plane2Texture");
         m_id_colorMatrix = program()->uniformLocation("colorMatrix");
         m_id_opacity = program()->uniformLocation("opacity");
+#ifdef EGLIMAGE_USING
+        m_id_eglimage = program()->uniformLocation("eglimage");
+#endif
     }
 
     int m_id_matrix;
@@ -101,6 +129,9 @@ protected:
     int m_id_plane2Texture;
     int m_id_colorMatrix;
     int m_id_opacity;
+#ifdef EGLIMAGE_USING
+    int m_id_eglimage;
+#endif
 };
 
 
@@ -192,6 +223,10 @@ public:
         m_frame = frame;
     }
 
+#ifdef EGLIMAGE_USING
+    struct EGLImage_arr* set_current_eglimage(EGLImage_arr *top);
+    void destroyEglImage();
+#endif
     void bind();
     void bindTexture(int id, int w, int h, const uchar *bits, GLenum format);
 
@@ -207,6 +242,23 @@ public:
 
     QVideoFrame m_frame;
     QMutex m_frameMutex;
+private:
+
+#ifdef EGLIMAGE_USING
+    EGLImageKHR        eglimage = EGL_NO_IMAGE_KHR;
+    EGLDisplay eglDisplay;
+    QPlatformNativeInterface* nativeInterface;
+
+    // /* EGL image function */
+    typedef EGLImageKHR (*EGLCREATEIMAGEKHR)(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, EGLint* attr_list);
+    typedef EGLBoolean (*EGLDESTROYIMAGEKHR)(EGLDisplay dpy, EGLImageKHR image);
+    typedef void (*GLEGLIMAGETARGETRENDERBUFFERSTORAGEOES)(GLenum target, GLeglImageOES image);
+    EGLCREATEIMAGEKHR eglCreateImageKHR;
+    EGLDESTROYIMAGEKHR eglDestroyImageKHR;
+    GLEGLIMAGETARGETRENDERBUFFERSTORAGEOES glEGLImageTargetTexture2D;
+
+    struct EGLImage_arr *eglimage_arr;
+#endif
 };
 
 QSGVideoMaterial_YUV::QSGVideoMaterial_YUV(const QVideoSurfaceFormat &format) :
@@ -254,6 +306,18 @@ QSGVideoMaterial_YUV::QSGVideoMaterial_YUV(const QVideoSurfaceFormat &format) :
     }
 
     setFlag(Blending, false);
+#ifdef EGLIMAGE_USING
+        QPlatformNativeInterface* nativeInterface = QGuiApplicationPrivate::platformIntegration()->nativeInterface();
+        Q_ASSERT(nativeInterface);
+        eglCreateImageKHR  = (EGLCREATEIMAGEKHR)eglGetProcAddress("eglCreateImageKHR");
+        eglDestroyImageKHR = (EGLDESTROYIMAGEKHR)eglGetProcAddress("eglDestroyImageKHR");
+        glEGLImageTargetTexture2D = (GLEGLIMAGETARGETRENDERBUFFERSTORAGEOES)eglGetProcAddress("glEGLImageTargetTexture2DOES");
+        eglDisplay = nativeInterface->nativeResourceForIntegration("egldisplay");
+        if(eglDisplay == EGL_NO_DISPLAY) printf("eglGetDisplay failed.\n");
+
+        eglimage_arr = NULL;
+        eglimage_used = 0;
+#endif
 }
 
 QSGVideoMaterial_YUV::~QSGVideoMaterial_YUV()
@@ -266,6 +330,83 @@ QSGVideoMaterial_YUV::~QSGVideoMaterial_YUV()
     }
 }
 
+#ifdef EGLIMAGE_USING
+
+struct EGLImage_arr * QSGVideoMaterial_YUV::set_current_eglimage(struct EGLImage_arr * top)
+{
+       struct EGLImage_arr *cur = top;
+       struct EGLImage_arr *tmp;
+       unsigned int page_size;
+       uintptr_t offset_plane0, offset_plane1;
+
+       while (cur != NULL) {
+               if (cur->fd[0] == m_frame.fd(0) && cur->fd[1] == m_frame.fd(1)){
+                       eglimage = cur->eglimage;
+                       return top;
+               }
+               cur = cur->next;
+       }
+
+
+       page_size = getpagesize();
+       offset_plane0 = reinterpret_cast<uintptr_t>(m_frame.bits(0));
+       offset_plane0 = offset_plane0 & (page_size - 1);
+       offset_plane1 = reinterpret_cast<uintptr_t>(m_frame.bits(1));
+       offset_plane1 = offset_plane1 & (page_size - 1);
+
+       int attribs[] = {
+                   EGL_WIDTH, m_textureSize.width(),
+                   EGL_HEIGHT, m_textureSize.height(),
+                   EGL_LINUX_DRM_FOURCC_EXT, DRM_FORMAT_NV12,
+                   EGL_DMA_BUF_PLANE0_FD_EXT, m_frame.fd(0),
+                   EGL_DMA_BUF_PLANE0_OFFSET_EXT, (int)offset_plane0,
+                   EGL_DMA_BUF_PLANE0_PITCH_EXT, m_frame.bytesPerLine(0),
+                   EGL_DMA_BUF_PLANE1_FD_EXT, m_frame.fd(1),
+                   EGL_DMA_BUF_PLANE1_OFFSET_EXT, (int)offset_plane1,
+                   EGL_DMA_BUF_PLANE1_PITCH_EXT, m_frame.bytesPerLine(1),
+                   EGL_NONE
+       };
+
+       tmp = (struct EGLImage_arr *)malloc(sizeof (struct EGLImage_arr));
+       memset(tmp,0,sizeof (struct EGLImage_arr));
+
+       tmp->fd[0] = m_frame.fd(0);
+       tmp->fd[1] = m_frame.fd(1);
+       tmp->eglimage = eglCreateImageKHR(eglDisplay,
+                                               EGL_NO_CONTEXT,
+                                               EGL_LINUX_DMA_BUF_EXT,
+                                               NULL, attribs);
+
+       if (tmp->eglimage == EGL_NO_IMAGE_KHR){
+               qCDebug(qLcVideo) << "eglCreateImageKHR failed for YUV format with target: EGL_LINUX_DMA_BUF_EXT. "
+				 << qPrintable(QString::number(eglGetError(), 16));
+               free(tmp);
+               eglimage = top != NULL ? top->eglimage : EGL_NO_IMAGE_KHR;
+               return top;
+       } else {
+            qCDebug(qLcVideo) << "eglCreateImageKHR success for YUV format with fd[] = [" << tmp->fd[0] << ", " << tmp->fd[1] << "]" ;
+       }
+
+       eglimage = tmp->eglimage;
+       tmp->next = top;
+       return tmp;
+}
+
+void QSGVideoMaterial_YUV::destroyEglImage()
+{
+        struct EGLImage_arr *tmp;
+
+        while (eglimage_arr != NULL) {
+            if(eglimage_arr->eglimage) {
+                eglDestroyImageKHR(eglDisplay, eglimage_arr->eglimage);
+            }
+            tmp = eglimage_arr;
+            eglimage_arr = eglimage_arr->next;
+            free (tmp);
+        }
+}
+#endif
+
 void QSGVideoMaterial_YUV::bind()
 {
     QOpenGLFunctions *functions = QOpenGLContext::currentContext()->functions();
@@ -281,6 +422,9 @@ void QSGVideoMaterial_YUV::bind()
                     functions->glDeleteTextures(m_planeCount, m_textureIds);
                 functions->glGenTextures(m_planeCount, m_textureIds);
                 m_textureSize = m_frame.size();
+#ifdef EGLIMAGE_USING
+                eglimage_arr = set_current_eglimage(eglimage_arr);
+#endif
             }
 
             GLint previousAlignment;
@@ -293,11 +437,28 @@ void QSGVideoMaterial_YUV::bind()
                 const int uv = 1;
 
                 m_planeWidth[0] = m_planeWidth[1] = qreal(fw) / m_frame.bytesPerLine(y);
+#ifdef EGLIMAGE_USING
+                if (eglimage_arr != NULL) {
+                       eglimage_used = 1;
+                       eglimage_arr = set_current_eglimage(eglimage_arr);
+                       functions->glActiveTexture(GL_TEXTURE0);
+                       functions->glBindTexture(GL_TEXTURE_2D, m_textureIds[0]);
+                       glEGLImageTargetTexture2D(GL_TEXTURE_2D, eglimage);
+                       functions->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+                       functions->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+                       functions->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
+                       functions->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
+                } else {
+#endif
+                eglimage_used = 0;
 
                 functions->glActiveTexture(GL_TEXTURE1);
                 bindTexture(m_textureIds[1], m_frame.bytesPerLine(uv) / 2, fh / 2, m_frame.bits(uv), GL_LUMINANCE_ALPHA);
                 functions->glActiveTexture(GL_TEXTURE0); // Finish with 0 as default texture unit
                 bindTexture(m_textureIds[0], m_frame.bytesPerLine(y), fh, m_frame.bits(y), GL_LUMINANCE);
+#ifdef EGLIMAGE_USING
+                }
+#endif
 
             } else { // YUV420P || YV12
                 const int y = 0;
@@ -349,6 +510,14 @@ QSGVideoNode_YUV::QSGVideoNode_YUV(const QVideoSurfaceFormat &format) :
     setMaterial(m_material);
 }
 
+#ifdef EGLIMAGE_USING
+void QSGVideoNode_YUV::destroyEglImage()
+{
+    m_material->destroyEglImage();
+}
+#endif
+
+
 QSGVideoNode_YUV::~QSGVideoNode_YUV()
 {
 }
@@ -370,6 +539,9 @@ void QSGVideoMaterialShader_YUV_BiPlanar::updateState(const RenderState &state,
     program()->setUniformValue(m_id_plane2Texture, 1);
 
     mat->bind();
+#ifdef EGLIMAGE_USING
+    program()->setUniformValue(m_id_eglimage, GLfloat(eglimage_used));
+#endif
 
     program()->setUniformValue(m_id_colorMatrix, mat->m_colorMatrix);
     program()->setUniformValue(m_id_plane1Width, mat->m_planeWidth[0]);
diff --git a/src/qtmultimediaquicktools/qsgvideonode_yuv_p.h b/src/qtmultimediaquicktools/qsgvideonode_yuv_p.h
index 9c0a1f36..59bd48e6 100644
--- a/src/qtmultimediaquicktools/qsgvideonode_yuv_p.h
+++ b/src/qtmultimediaquicktools/qsgvideonode_yuv_p.h
@@ -64,6 +64,9 @@ public:
         return QAbstractVideoBuffer::NoHandle;
     }
     void setCurrentFrame(const QVideoFrame &frame, FrameFlags flags);
+#ifdef EGLIMAGE_USING
+    void destroyEglImage();
+#endif
 
 private:
     void bindTexture(int id, int unit, int w, int h, const uchar *bits);
diff --git a/src/qtmultimediaquicktools/qtmultimediaquicktools.pro b/src/qtmultimediaquicktools/qtmultimediaquicktools.pro
index e1425c3e..8338ec49 100644
--- a/src/qtmultimediaquicktools/qtmultimediaquicktools.pro
+++ b/src/qtmultimediaquicktools/qtmultimediaquicktools.pro
@@ -1,6 +1,6 @@
 TARGET = QtMultimediaQuick_p
 
-QT = core quick multimedia-private
+QT = core core-private quick quick-private multimedia-private widgets widgets-private gui gui-private
 CONFIG += internal_module
 
 # Header files must go inside source directory of a module
@@ -46,3 +46,6 @@ OTHER_FILES += \
     shaders/triplanaryuvvideo.frag
 
 load(qt_module)
+
+LIBS += -lEGL -lGLESv2
+DEFINES += EGLIMAGE_USING
diff --git a/src/qtmultimediaquicktools/shaders/biplanaryuvvideo.frag b/src/qtmultimediaquicktools/shaders/biplanaryuvvideo.frag
index 2ede9108..f7739a2d 100644
--- a/src/qtmultimediaquicktools/shaders/biplanaryuvvideo.frag
+++ b/src/qtmultimediaquicktools/shaders/biplanaryuvvideo.frag
@@ -2,13 +2,15 @@ uniform sampler2D plane1Texture;
 uniform sampler2D plane2Texture;
 uniform mediump mat4 colorMatrix;
 uniform lowp float opacity;
+uniform lowp float eglimage;
 varying highp vec2 plane1TexCoord;
 varying highp vec2 plane2TexCoord;
 
 void main()
 {
-    mediump float Y = texture2D(plane1Texture, plane1TexCoord).r;
+    mediump vec4 vec_plane1 = texture2D(plane1Texture, plane1TexCoord);
     mediump vec2 UV = texture2D(plane2Texture, plane2TexCoord).ra;
-    mediump vec4 color = vec4(Y, UV.x, UV.y, 1.);
-    gl_FragColor = colorMatrix * color * opacity;
+    mediump vec4 color = vec4(vec_plane1.r, UV.x, UV.y, 1.);
+    gl_FragColor = ( colorMatrix * color * ( 1.0 - eglimage ) +
+                 ( vec_plane1 * eglimage )) * opacity;
 }
-- 
2.17.1

