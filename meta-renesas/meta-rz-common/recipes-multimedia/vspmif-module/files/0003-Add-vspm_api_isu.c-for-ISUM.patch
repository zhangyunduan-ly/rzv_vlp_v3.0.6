From bca6d77650e050815208a5c9ecf05128d0f0a5d8 Mon Sep 17 00:00:00 2001
From: Nhat Thieu <nhat.thieu.xr@renesas.com>
Date: Tue, 13 Jul 2021 16:53:54 +0700
Subject: [PATCH] Add-vspm_api_isu.c-for-ISUM

---
 .../files/vspm_if/if/vspm_api_isu.c           | 433 ++++++++++++++++++
 1 file changed, 433 insertions(+)
 create mode 100755 vspm_if-module/files/vspm_if/if/vspm_api_isu.c

diff --git a/vspm_if-module/files/vspm_if/if/vspm_api_isu.c b/vspm_if-module/files/vspm_if/if/vspm_api_isu.c
new file mode 100755
index 0000000..93d7200
--- /dev/null
+++ b/vspm_if-module/files/vspm_if/if/vspm_api_isu.c
@@ -0,0 +1,433 @@
+/* 
+ * Copyright (c) 2015-2016 Renesas Electronics Corporation
+ * Released under the MIT license
+ * http://opensource.org/licenses/mit-license.php 
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <pthread.h>
+
+#include "vspm_public.h"
+#include "mmngr_user_public.h"
+
+struct vspm_if_isu_handle_t {
+	void *handle;
+	pthread_mutex_t mutex;
+	struct vspm_if_isu_cb_t *cb_list;
+};
+
+struct vspm_if_isu_par_t {
+	struct vspm_job_t job_par;
+	struct isu_start_t start_par;
+	struct vspm_if_isu_src_par_t {
+		struct isu_src_t src_par;
+		struct isu_alpha_unit_t alpha;
+		struct isu_td_unit_t td;
+	} src;
+	struct vspm_if_isu_dst_par_t {
+		struct isu_dst_t dst_par;
+		struct isu_alpha_unit_t alpha;
+		struct isu_csc_t csc;
+	} dst;
+	struct isu_rs_t rs;
+};
+
+struct vspm_if_isu_cb_t {
+	struct vspm_if_isu_handle_t *parent_hdl;
+	struct vspm_if_isu_par_t isu_par;
+	unsigned long user_data;
+	void (*cb_func)
+		(unsigned long job_id, long result, unsigned long user_data);
+	struct vspm_if_isu_cb_t *next;
+};
+
+
+static void vspm_if_add_isu_cb_info(
+	struct vspm_if_isu_handle_t *hdl, struct vspm_if_isu_cb_t *set_cb)
+{
+	pthread_mutex_lock(&hdl->mutex);
+
+	/* regist parent handle */
+	set_cb->parent_hdl = hdl;
+
+	/* regist callback list */
+	set_cb->next = hdl->cb_list;
+	hdl->cb_list = set_cb;
+
+	pthread_mutex_unlock(&hdl->mutex);
+}
+
+
+static long vspm_if_del_isu_cb_info(struct vspm_if_isu_cb_t *target_cb)
+{
+	struct vspm_if_isu_handle_t *hdl = target_cb->parent_hdl;
+	struct vspm_if_isu_cb_t *cb;
+	struct vspm_if_isu_cb_t *pre_cb;
+
+	long ercd = R_VSPM_NG;
+
+	pthread_mutex_lock(&hdl->mutex);
+
+	cb = hdl->cb_list;
+	pre_cb = NULL;
+
+	while (cb != NULL) {
+		if (cb == target_cb) {
+			if (pre_cb == NULL) {
+				hdl->cb_list = cb->next;
+			} else {
+				pre_cb->next = cb->next;
+			}
+			ercd = R_VSPM_OK;
+			break;
+		}
+
+		pre_cb = cb;
+		cb = cb->next;
+	}
+
+	pthread_mutex_unlock(&hdl->mutex);
+
+	return ercd;
+}
+
+static void vspm_if_set_isu_src_param(
+	struct vspm_if_isu_src_par_t *par, T_ISU_IN *old_src_par)
+{
+	struct isu_src_t *src_par = &par->src_par;
+
+	unsigned long tmp;
+
+	tmp = (unsigned long)old_src_par->addr;
+	src_par->addr = (unsigned int)(tmp & 0xffffffff);
+	tmp = (unsigned long)old_src_par->addr_c;
+	src_par->addr_c = (unsigned int)(tmp & 0xffffffff);
+	src_par->stride = old_src_par->stride;
+	src_par->stride_c = old_src_par->stride_c;
+	src_par->width = old_src_par->width;
+	src_par->height = old_src_par->height;
+	src_par->format = old_src_par->format;
+	src_par->swap = old_src_par->swap;
+	src_par->uv_conv = old_src_par->uv_conv;
+
+
+	if (old_src_par->alpha != NULL) {
+		par->alpha.asel = old_src_par->alpha->asel;
+		par->alpha.anum0 = old_src_par->alpha->anum0;
+		par->alpha.anum1 = old_src_par->alpha->anum1;
+		par->alpha.anum2 = old_src_par->alpha->anum2;
+		par->alpha.athres0 = old_src_par->alpha->athres0;
+		par->alpha.athres1 = old_src_par->alpha->athres1;
+		src_par->alpha = &par->alpha;
+	}
+
+	if (old_src_par->td != NULL){
+		par->td.grada_mode = old_src_par->td->grada_mode;
+		par->td.grada_step = old_src_par->td->grada_step;
+		par->td.init_val = old_src_par->td->init_val;
+		src_par->td = &par->td;
+	}
+}
+
+
+static void vspm_if_set_isu_dst_param(
+	struct vspm_if_isu_dst_par_t *par, T_ISU_OUT *old_dst_par)
+{
+	unsigned long tmp;
+	struct isu_dst_t *dst_par = &par->dst_par;
+	int i,j;
+
+	tmp = (unsigned long)old_dst_par->addr;
+	dst_par->addr = (unsigned int)(tmp & 0xffffffff);
+	tmp = (unsigned long)old_dst_par->addr_c;
+	dst_par->addr_c = (unsigned int)(tmp & 0xffffffff);;
+	dst_par->stride = old_dst_par->stride;
+	dst_par->stride_c = old_dst_par->stride_c;
+	dst_par->format = old_dst_par->format;
+	dst_par->swap = old_dst_par->swap;
+	if (old_dst_par->csc != NULL){
+		par->csc.csc = old_dst_par->csc->csc;
+		for(i=0;i<3;i++){
+			for(j=0;j<3;j++){
+				if(j<2){
+					par->csc.offset[i][j]=old_dst_par->csc->offset[i][j];
+					par->csc.clip[i][j]=old_dst_par->csc->clip[i][j];
+				}
+				par->csc.k_matrix[i][j]=old_dst_par->csc->k_matrix[i][j];
+			}
+		}
+		dst_par->csc = &par->csc; 
+	}
+	if (old_dst_par->alpha != NULL) {
+                par->alpha.asel 	= old_dst_par->alpha->asel;
+                par->alpha.anum0 	= old_dst_par->alpha->anum0;
+                par->alpha.anum1 	= old_dst_par->alpha->anum1;
+                par->alpha.anum2 	= old_dst_par->alpha->anum2;
+                par->alpha.athres0	= old_dst_par->alpha->athres0;
+                par->alpha.athres1 	= old_dst_par->alpha->athres1;
+		dst_par->alpha = &par->alpha;
+        }
+}
+
+
+static void vspm_if_set_isu_rs_param(
+	struct isu_rs_t *rs, T_ISU_RS *old_rs_par)
+{
+	rs->start_x 	= old_rs_par->start_x;
+	rs->start_y 	= old_rs_par->start_y;
+	rs->tune_x 	= old_rs_par->tune_x;
+	rs->tune_y 	= old_rs_par->tune_y;
+	rs->crop_w 	= old_rs_par->crop_w;
+	rs->crop_h 	= old_rs_par->crop_h;
+	rs->pad_mode 	= old_rs_par->pad_mode;
+	rs->pad_val 	= old_rs_par->pad_val;
+	rs->x_ratio 	= old_rs_par->x_ratio;
+	rs->y_ratio 	= old_rs_par->y_ratio;
+}
+
+static void vspm_if_set_isu_param(
+	struct vspm_if_isu_par_t *isu_par, T_ISU_START *src)
+{
+	struct isu_start_t *st_par = &isu_par->start_par;
+
+	if (src->src_par != NULL) {
+		vspm_if_set_isu_src_param(&isu_par->src, src->src_par);
+		st_par->src_par = &isu_par->src.src_par;
+	}
+
+	if (src->dst_par != NULL) {
+		vspm_if_set_isu_dst_param(&isu_par->dst, src->dst_par);
+		st_par->dst_par = &isu_par->dst.dst_par;
+	}
+
+	if (src->rs_par != NULL) {
+		vspm_if_set_isu_rs_param(&isu_par->rs, src->rs_par);
+		st_par->rs_par = &isu_par->rs;
+	}
+
+	st_par->dl_hard_addr = 0;
+
+	isu_par->job_par.type = VSPM_TYPE_ISU_AUTO;
+	isu_par->job_par.par.isu = st_par;
+}
+
+
+static void vspm_if_release_memory(struct vspm_if_isu_cb_t *cb_info)
+{
+}
+
+
+long VSPM_lib_DriverInitialize(unsigned long *handle)
+{
+	struct vspm_if_isu_handle_t *hdl;
+
+	struct vspm_init_t init_par;
+	long ercd;
+
+	/* check parameter */
+	if (handle == NULL) {
+		return R_VSPM_NG;
+	}
+
+	/* allocate memory */
+	hdl = malloc(sizeof(struct vspm_if_isu_handle_t));
+	if (hdl == NULL) {
+		return R_VSPM_NG;
+	}
+	memset(hdl, 0, sizeof(struct vspm_if_isu_handle_t));
+
+	/* initialize mutex */
+	(void)pthread_mutex_init(&hdl->mutex, NULL);
+
+	/* set parameter */
+	init_par.use_ch = VSPM_EMPTY_CH;
+	init_par.mode = VSPM_MODE_MUTUAL;
+	init_par.type = VSPM_TYPE_ISU_AUTO;
+
+	/* initialize VSP manager */
+	ercd = vspm_init_driver(&hdl->handle, &init_par);
+	if (ercd != R_VSPM_OK) {
+		free(hdl);
+	}
+
+	*handle = (unsigned long)hdl;
+
+	return ercd;
+}
+
+
+long VSPM_lib_DriverQuit(unsigned long handle)
+{
+	struct vspm_if_isu_handle_t *hdl =
+		(struct vspm_if_isu_handle_t *)handle;
+	struct vspm_if_isu_cb_t *cb, *next_cb;
+
+	long ercd;
+
+	/* check parameter */
+	if (hdl == NULL) {
+		return R_VSPM_PARAERR;
+	}
+
+	/* finalize VSP manager */
+	ercd = vspm_quit_driver(hdl->handle);
+	if (ercd != R_VSPM_NG) {
+		return ercd;
+	}
+
+	/* release memory of unnotified callback */
+	cb = hdl->cb_list;
+	while (cb != NULL) {
+		next_cb = cb->next;
+		ercd = vspm_if_del_isu_cb_info(cb);
+		if (ercd == R_VSPM_OK) {
+			vspm_if_release_memory(cb);
+		}
+		cb = next_cb;
+	}
+
+	/* release memory */
+	free(hdl);
+
+	return R_VSPM_OK;
+}
+
+
+static void vspm_if_isu_cb_func(
+	unsigned long job_id, long result, void *user_data)
+{
+	struct vspm_if_isu_cb_t *cb_info =
+		(struct vspm_if_isu_cb_t *)user_data;
+	long ercd;
+
+	/* check parameter */
+	if (cb_info == NULL) {
+		return;
+	}
+
+	/* disconnect callback information from handle */
+	ercd = vspm_if_del_isu_cb_info(cb_info);
+	if (ercd != R_VSPM_OK) {
+		/* already cancel? */
+		return;
+	}
+
+	/* callback function */
+	if (cb_info->cb_func != NULL) {
+		cb_info->cb_func(job_id, result, cb_info->user_data);
+	}
+
+	/* release memory */
+	vspm_if_release_memory(cb_info);
+}
+
+
+long VSPM_lib_Entry(
+	unsigned long handle,
+	unsigned long *puwJobId,
+	char bJobPriority,
+	VSPM_IP_PAR *ptIpParam,
+	unsigned long uwUserData,
+	void *pfnNotifyComplete)
+{
+	struct vspm_if_isu_handle_t *hdl =
+		(struct vspm_if_isu_handle_t *)handle;
+
+	struct vspm_if_isu_cb_t *cb_info;
+	long ercd;
+
+	/* check parameter */
+	if (hdl == NULL) {
+		return R_VSPM_PARAERR;
+	}
+
+	if (ptIpParam->uhType != VSPM_TYPE_ISU_AUTO) {
+		return R_VSPM_PARAERR;
+	}
+
+	if (ptIpParam->unionIpParam.ptVsp == NULL) {
+		return R_VSPM_PARAERR;
+	}
+
+	/* allocate memory */
+	cb_info = malloc(sizeof(struct vspm_if_isu_cb_t));
+	if (cb_info == NULL) {
+		return R_VSPM_NG;
+	}
+	memset(cb_info, 0, sizeof(struct vspm_if_isu_cb_t));
+
+	/* set entry parameter */
+	vspm_if_set_isu_param(&cb_info->isu_par, ptIpParam->unionIpParam.ptisu);
+
+	/* set callback parameter */
+	cb_info->user_data = uwUserData;
+	cb_info->cb_func = pfnNotifyComplete;
+
+	/* connect callback information to handle */
+	vspm_if_add_isu_cb_info(hdl, cb_info);
+
+	/* entry of job */
+	ercd = vspm_entry_job(
+		hdl->handle,
+		puwJobId,
+		bJobPriority,
+		&cb_info->isu_par.job_par,
+		(void *)cb_info,
+		vspm_if_isu_cb_func);
+	if (ercd != R_VSPM_OK) {
+		(void)vspm_if_del_isu_cb_info(cb_info);
+		vspm_if_release_memory(cb_info);
+	}
+
+	return ercd;
+}
+
+
+long VSPM_lib_Cancel(unsigned long handle, unsigned long uwJobId)
+{
+	struct vspm_if_isu_handle_t *hdl =
+		(struct vspm_if_isu_handle_t *)handle;
+
+	/* check parameter */
+	if (hdl == NULL) {
+		return R_VSPM_PARAERR;
+	}
+
+	return vspm_cancel_job(hdl->handle, uwJobId);
+}
+
+
+short VSPM_lib_PVioUdsGetRatio(
+	unsigned short ushInSize,
+	unsigned short ushOutSize,
+	unsigned short *ushRatio)
+{
+	unsigned long ratio;
+
+	/* check parameter */
+	if (ushRatio == NULL)
+		return R_VSPM_NG;
+
+	if ((ushInSize < 1) | (ushOutSize < 1))
+		return R_VSPM_NG;
+
+	/* AMD=0 */
+	if (ushInSize < ushOutSize) {
+		ushInSize--;
+		ushOutSize--;
+	}
+
+	/* calculate ratio */
+	ratio = ((unsigned long)ushInSize) * 0x1000UL;
+	ratio /= (unsigned long)ushOutSize;
+
+	/* check error */
+	if ((ratio < 0x100) || (ratio > 0xFFFF))
+		return R_VSPM_NG;
+
+	*ushRatio = (unsigned short)ratio;
+
+	return R_VSPM_OK;
+}
-- 
2.17.1

