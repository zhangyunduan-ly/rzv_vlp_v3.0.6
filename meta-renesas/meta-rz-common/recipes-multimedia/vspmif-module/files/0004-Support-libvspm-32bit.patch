From bb784657831a698465f960f35c0b9f388a4e6517 Mon Sep 17 00:00:00 2001
From: Nhat Thieu <nhat.thieu.xr@renesas.com>
Date: Thu, 2 Dec 2021 09:51:21 +0700
Subject: [PATCH 4/4] Support libvspm 32bit

Signed-off-by: Nhat Thieu <nhat.thieu.xr@renesas.com>
---
 vspm_if-module/files/vspm_if/if/Makefile   |  9 ++++++++-
 vspm_if-module/files/vspm_if/if/vspm_api.c | 24 ++++++++++++++++++++++--
 2 files changed, 30 insertions(+), 3 deletions(-)

diff --git a/vspm_if-module/files/vspm_if/if/Makefile b/vspm_if-module/files/vspm_if/if/Makefile
index c85f36d..ded9a66 100644
--- a/vspm_if-module/files/vspm_if/if/Makefile
+++ b/vspm_if-module/files/vspm_if/if/Makefile
@@ -1,10 +1,17 @@
 all:
 ifeq ($(VSPM_LEGACY_IF),1)
-#	${CC} -fPIC -c vspm_api.c vspm_api_vsp.c vspm_api_fdp.c -I../include -I$(INCSHARED) -Wall
+   ifeq ($(VSPM32),1)
+	${CC} -fPIC -c vspm_api.c vspm_api_isu.c vspm_api_fdp.c -DVSPM32=1 -I../include -I$(INCSHARED) -I$(KERNELSRC)/include -Wall
+   else
 	${CC} -fPIC -c vspm_api.c vspm_api_isu.c vspm_api_fdp.c -I../include -I$(INCSHARED) -I$(KERNELSRC)/include -Wall
+   endif
 	${CC} -shared -Wl,-soname=libvspm.so.1 -o libvspm.so.1.0.0 vspm_api.o vspm_api_isu.o vspm_api_fdp.o
 else
+   ifeq ($(VSPM32),1)
+	${CC} -fPIC -c vspm_api.c -DVSPM32=1 -I../include -I$(INCSHARED) -I$(KERNELSRC)/include -Wall
+   else
 	${CC} -fPIC -c vspm_api.c -I../include -I$(INCSHARED) -I$(KERNELSRC)/include -Wall
+   endif
 	${CC} -shared -Wl,-soname=libvspm.so.1 -o libvspm.so.1.0.0 vspm_api.o
 endif
 	ln -s ./libvspm.so.1.0.0 libvspm.so.1
diff --git a/vspm_if-module/files/vspm_if/if/vspm_api.c b/vspm_if-module/files/vspm_if/if/vspm_api.c
index c392078..e978ed0 100644
--- a/vspm_if-module/files/vspm_if/if/vspm_api.c
+++ b/vspm_if-module/files/vspm_if/if/vspm_api.c
@@ -1,7 +1,7 @@
-/* 
+/*
  * Copyright (c) 2015-2017 Renesas Electronics Corporation
  * Released under the MIT license
- * http://opensource.org/licenses/mit-license.php 
+ * http://opensource.org/licenses/mit-license.php
  */
 
 #include <stdio.h>
@@ -35,7 +35,11 @@ static int vspm_cb_thread(struct vspm_handle *hdl)
 	struct vspm_if_cb_rsp_t cb_info;
 
 	while (1) {
+#ifdef VPSM32
+		if (ioctl(hdl->fd, VSPM_IOC_CMD_WAIT_INTERRUPT32, &cb_info))
+#else
 		if (ioctl(hdl->fd, VSPM_IOC_CMD_WAIT_INTERRUPT, &cb_info))
+#endif
 			continue;
 
 		/* check error code */
@@ -83,7 +87,11 @@ long vspm_init_driver(void **handle, struct vspm_init_t *param)
 	}
 
 	/* initialize VSP manager */
+#ifdef VSPM32
+	if (ioctl(hdl->fd, VSPM_IOC_CMD_INIT32, param)) {
+#else
 	if (ioctl(hdl->fd, VSPM_IOC_CMD_INIT, param)) {
+#endif
 		/* change error number */
 		switch (errno) {
 		case EINVAL:
@@ -225,7 +233,11 @@ long vspm_entry_job(
 	entry_info.req.user_data = user_data;
 	entry_info.req.cb_func   = cb_func;
 
+#ifdef VSPM32
+	if (ioctl(hdl->fd, VSPM_IOC_CMD_ENTRY32, &entry_info)) {
+#else
 	if (ioctl(hdl->fd, VSPM_IOC_CMD_ENTRY, &entry_info)) {
+#endif
 		ERRPRINT("failed to ioctl(VSPM_IOC_CMD_ENTRY)\n");
 		return R_VSPM_NG;
 	}
@@ -251,7 +263,11 @@ long vspm_cancel_job(void *handle, unsigned long job_id)
 		return R_VSPM_PARAERR;
 
 	/* cancel job */
+#ifdef VSPM32
+	if (ioctl(hdl->fd, VSPM_IOC_CMD_CANCEL32, &job_id)) {
+#else
 	if (ioctl(hdl->fd, VSPM_IOC_CMD_CANCEL, &job_id)) {
+#endif
 		/* change error number */
 		switch (errno) {
 		case EBUSY:
@@ -281,7 +297,11 @@ long vspm_get_status(void *handle, struct vspm_status_t *status)
 		return R_VSPM_PARAERR;
 
 	/* get a status */
+#ifdef VSPM32
+	if (ioctl(hdl->fd, VSPM_IOC_CMD_GET_STATUS32, status)) {
+#else
 	if (ioctl(hdl->fd, VSPM_IOC_CMD_GET_STATUS, status)) {
+#endif
 		/* change error number */
 		switch (errno) {
 		case EINVAL:
-- 
2.7.4
