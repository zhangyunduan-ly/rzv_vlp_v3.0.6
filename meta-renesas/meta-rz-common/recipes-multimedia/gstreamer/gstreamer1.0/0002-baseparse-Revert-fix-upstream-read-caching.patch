From 57b54a05b3ec990cf04979f03fe76f5a24edbfba Mon Sep 17 00:00:00 2001
From: namcao <nam.cao.xv@renesas.com>
Date: Tue, 2 Aug 2022 09:14:51 +0700
Subject: [PATCH] baseparse: Revert fix upstream read caching

Workaround revert commit:
https://gitlab.freedesktop.org/gstreamer/gstreamer/-/commit/e906197c622725e48b6250a71a922d45b006fb14
because it causes error: assertion failed: (current_off < size) sometimes
---
 libs/gst/base/gstbaseparse.c | 63 +++++++++---------------------------
 1 file changed, 16 insertions(+), 47 deletions(-)

diff --git a/libs/gst/base/gstbaseparse.c b/libs/gst/base/gstbaseparse.c
index e2ec6ae..2de9c23 100644
--- a/libs/gst/base/gstbaseparse.c
+++ b/libs/gst/base/gstbaseparse.c
@@ -3307,21 +3307,6 @@ done:
   return ret;
 }
 
-/* Return the number of bytes available in the cached
- * read buffer, if any */
-static guint
-gst_base_parse_get_cached_available (GstBaseParse * parse)
-{
-  if (parse->priv->cache != NULL) {
-    gint64 cache_offset = GST_BUFFER_OFFSET (parse->priv->cache);
-    gint cache_size = gst_buffer_get_size (parse->priv->cache);
-
-    if (parse->priv->offset >= cache_offset
-        && parse->priv->offset < cache_offset + cache_size)
-      return cache_size - (parse->priv->offset - cache_offset); /* Size of the cache minus consumed */
-  }
-  return 0;
-}
 
 /* pull @size bytes at current offset,
  * i.e. at least try to and possibly return a shorter buffer if near the end */
@@ -3344,9 +3329,6 @@ gst_base_parse_pull_range (GstBaseParse * parse, guint size,
       *buffer = gst_buffer_copy_region (parse->priv->cache, GST_BUFFER_COPY_ALL,
           parse->priv->offset - cache_offset, size);
       GST_BUFFER_OFFSET (*buffer) = parse->priv->offset;
-      GST_LOG_OBJECT (parse,
-          "Satisfying read request of %u bytes from cached buffer with offset %"
-          G_GINT64_FORMAT, size, cache_offset);
       return GST_FLOW_OK;
     }
     /* not enough data in the cache, free cache and get a new one */
@@ -3355,13 +3337,9 @@ gst_base_parse_pull_range (GstBaseParse * parse, guint size,
   }
 
   /* refill the cache */
-  size = MAX (64 * 1024, size);
-  GST_LOG_OBJECT (parse,
-      "Reading cache buffer of %u bytes from offset %" G_GINT64_FORMAT,
-      size, parse->priv->offset);
   ret =
-      gst_pad_pull_range (parse->sinkpad, parse->priv->offset, size,
-      &parse->priv->cache);
+      gst_pad_pull_range (parse->sinkpad, parse->priv->offset, MAX (size,
+      64 * 1024), &parse->priv->cache);
   if (ret != GST_FLOW_OK) {
     parse->priv->cache = NULL;
     return ret;
@@ -3378,7 +3356,6 @@ gst_base_parse_pull_range (GstBaseParse * parse, guint size,
     return GST_FLOW_OK;
   }
 
-  GST_BUFFER_OFFSET (parse->priv->cache) = parse->priv->offset;
 
   *buffer =
       gst_buffer_copy_region (parse->priv->cache, GST_BUFFER_COPY_ALL, 0, size);
@@ -3464,14 +3441,9 @@ gst_base_parse_scan_frame (GstBaseParse * parse, GstBaseParseClass * klass)
   GST_LOG_OBJECT (parse, "scanning for frame at offset %" G_GUINT64_FORMAT
       " (%#" G_GINT64_MODIFIER "x)", parse->priv->offset, parse->priv->offset);
 
-  /* let's make this efficient for all subclass once and for all;
-   * maybe it does not need this much, but in the latter case, we know we are
-   * in pull mode here and might as well try to read and supply more anyway,
-   * so start with the cached buffer, or if that's shrunk below 1024 bytes,
-   * pull a new cache buffer */
-  fsize = gst_base_parse_get_cached_available (parse);
-  if (fsize < 1024)
-    fsize = 64 * 1024;
+   /* in pull mode here and might as well try to read and supply more anyway
+   * (so does the buffer caching mechanism) */
+  fsize = 64 * 1024;
 
   while (TRUE) {
     min_size = MAX (parse->priv->min_frame_size, fsize);
@@ -3499,8 +3471,7 @@ gst_base_parse_scan_frame (GstBaseParse * parse, GstBaseParseClass * klass)
           GST_ERROR_OBJECT (parse, "Failed to detect format but draining");
           return GST_FLOW_ERROR;
         } else {
-          /* Double our frame size, or increment by at most 64KB */
-          fsize += MIN (fsize, 64 * 1024);
+          fsize += 64 * 1024;
           gst_buffer_unref (buffer);
           continue;
         }
@@ -3531,20 +3502,18 @@ gst_base_parse_scan_frame (GstBaseParse * parse, GstBaseParseClass * klass)
       GST_LOG_OBJECT (parse, "frame finished, breaking loop");
       break;
     }
+    /* nothing flushed, no skip and draining, so nothing left to do */
+    if (!skip && parse->priv->drain) {
+      GST_LOG_OBJECT (parse, "no activity or result when draining; "
+          "breaking loop and marking EOS");
+      ret = GST_FLOW_EOS;
+      break;
+    }
+    /* otherwise, get some more data
+     * note that is checked this does not happen indefinitely */
     if (!skip) {
-      if (parse->priv->drain) {
-        /* nothing flushed, no skip and draining, so nothing left to do */
-        GST_LOG_OBJECT (parse, "no activity or result when draining; "
-            "breaking loop and marking EOS");
-        ret = GST_FLOW_EOS;
-        break;
-      }
-      /* otherwise, get some more data
-       * note that is checked this does not happen indefinitely */
       GST_LOG_OBJECT (parse, "getting some more data");
-
-      /* Double our frame size, or increment by at most 64KB */
-      fsize += MIN (fsize, 64 * 1024);
+      fsize += 64 * 1024;
     }
     parse->priv->drain = FALSE;
   }
-- 
2.17.1

