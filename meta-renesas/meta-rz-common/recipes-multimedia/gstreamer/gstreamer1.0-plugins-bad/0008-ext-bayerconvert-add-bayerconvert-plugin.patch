From d1546f81e646ba8af663b677fc9055cfca1e8d7e Mon Sep 17 00:00:00 2001
From: trungvanle <trung.le.xk@renesas.com>
Date: Fri, 19 Jan 2024 14:12:23 +0700
Subject: [PATCH] ext: bayerconvert: add bayerconvert plugin

This patch will add new gstreamer plugin 'bayerconvert'.
This plugin will help convert from BAYER format to BGRx format and give
the output to other element.

Signed-off-by: trungvanle <trung.le.xk@renesas.com>
---
 ext/bayerconvert/gstbayerconvert.c | 568 +++++++++++++++++++++++++++++
 ext/bayerconvert/gstbayerconvert.h | 103 ++++++
 ext/bayerconvert/meson.build       |  30 ++
 ext/meson.build                    |   1 +
 4 files changed, 702 insertions(+)
 create mode 100644 ext/bayerconvert/gstbayerconvert.c
 create mode 100644 ext/bayerconvert/gstbayerconvert.h
 create mode 100644 ext/bayerconvert/meson.build

diff --git a/ext/bayerconvert/gstbayerconvert.c b/ext/bayerconvert/gstbayerconvert.c
new file mode 100644
index 000000000..81db5c853
--- /dev/null
+++ b/ext/bayerconvert/gstbayerconvert.c
@@ -0,0 +1,568 @@
+/* GStreamer
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin Street, Suite 500,
+ * Boston, MA 02110-1335, USA.
+ */
+/**
+ * SECTION:element-gstbayerconvert
+ *
+ * The bayerconvert element does bayer to RGB conversion in opengl
+ *
+ * <refsect2>
+ * <title>Example launch line</title>
+ * |[
+ * gst-launch-1.0 -v videotestsrc ! bayerconvert ! waylandsink
+ * ]|
+ * </refsect2>
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <gst/gst.h>
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+#include <sys/time.h>
+#include "gstbayerconvert.h"
+
+#include "mmngr_user_public.h"
+#include "mmngr_buf_user_public.h"
+
+GST_DEBUG_CATEGORY_STATIC (gst_bayerconvert_debug_category);
+#define GST_CAT_DEFAULT gst_bayerconvert_debug_category
+
+/* prototypes */
+static void gst_bayerconvert_finalize (GObject *obj);
+static GstCaps *
+gst_bayerconvert_transform_caps (GstBaseTransform * btrans,
+    GstPadDirection direction, GstCaps * caps, GstCaps * filter);
+static GstFlowReturn
+gst_bayerconvert_transform (GstBaseTransform * trans, GstBuffer *inbuf,
+                            GstBuffer *outbuf);
+static GstCaps * gst_bayerconvert_fixate_caps (GstBaseTransform * filter,
+    GstPadDirection direction, GstCaps * caps, GstCaps * othercaps);
+static GstFlowReturn gst_bayerconvert_prepare_output_buffer (
+    GstBaseTransform * trans, GstBuffer *inbuf, GstBuffer **outbuf);
+static GstStateChangeReturn
+gst_bayerconvert_change_state (GstElement * element, GstStateChange transition);
+static GstBufferPool *
+gst_bayerconvert_buffer_pool_new (GstBayerConvert * bayerconvert);
+static void
+gst_bayerconvert_buffer_pool_finalize (GObject * object);
+static GstFlowReturn
+gst_bayerconvert_buffer_pool_alloc_buffer (GstBufferPool * bpool,
+    GstBuffer ** buffer, GstBufferPoolAcquireParams * params);
+static void
+gst_bayerconvert_buffer_pool_free_buffer (GstBufferPool * bpool, GstBuffer * buffer);
+
+/* pad templates */
+
+static GstStaticPadTemplate gst_bayerconvert_sink_template =
+GST_STATIC_PAD_TEMPLATE ("sink",
+    GST_PAD_SINK,
+    GST_PAD_ALWAYS,
+    GST_STATIC_CAPS ("video/x-bayer,format=(string)rggb,"
+        "width=(int)[1,MAX],height=(int)[1,MAX],framerate=(fraction)[0/1,MAX]")
+    );
+
+static GstStaticPadTemplate gst_bayerconvert_src_template =
+GST_STATIC_PAD_TEMPLATE ("src",
+    GST_PAD_SRC,
+    GST_PAD_ALWAYS,
+    GST_STATIC_CAPS ("video/x-raw,format=(string)BGRx,"
+        "width=(int)[1,MAX],height=(int)[1,MAX],framerate=(fraction)[0/1,MAX]")
+    );
+
+/* class initialization */
+G_DEFINE_TYPE_WITH_CODE (GstBayerConvert, gst_bayerconvert,
+    GST_TYPE_BASE_TRANSFORM,
+    GST_DEBUG_CATEGORY_INIT (gst_bayerconvert_debug_category,
+        "bayerconvert", 0, "debug category for bayerconvert element"));
+G_DEFINE_TYPE (GstBayerConvertBufferPool, gst_bayerconvert_buffer_pool, GST_TYPE_BUFFER_POOL);
+
+static void
+gst_bayerconvert_class_init (GstBayerConvertClass * klass)
+{
+  GObjectClass *gobject_class;
+  GstBaseTransformClass *gstbasetransform_class;
+  GstElementClass *gstelement_class;
+
+  gobject_class = (GObjectClass *) klass;
+  gstbasetransform_class = (GstBaseTransformClass *) klass;
+  gstelement_class = (GstElementClass *) klass;
+  gst_element_class_add_pad_template (GST_ELEMENT_CLASS (klass),
+      gst_static_pad_template_get (&gst_bayerconvert_sink_template));
+  gst_element_class_add_pad_template (GST_ELEMENT_CLASS (klass),
+      gst_static_pad_template_get (&gst_bayerconvert_src_template));
+
+  gst_element_class_set_static_metadata (GST_ELEMENT_CLASS (klass),
+      "Bayer video convert to BGRx format", "Converter/Video",
+      "Converts Bayer to BGRx",
+      "Create product by Renesas Electronics Corp."
+      "Refer product of Witekio for Renesas <aguyon@witekio.us>");
+
+  gobject_class->finalize = gst_bayerconvert_finalize;
+  gstelement_class->change_state = gst_bayerconvert_change_state;
+  gstbasetransform_class->passthrough_on_same_caps = TRUE;
+  gstbasetransform_class->transform_caps =
+      GST_DEBUG_FUNCPTR (gst_bayerconvert_transform_caps);
+  gstbasetransform_class->fixate_caps =
+      GST_DEBUG_FUNCPTR (gst_bayerconvert_fixate_caps);
+  gstbasetransform_class->transform =
+      GST_DEBUG_FUNCPTR (gst_bayerconvert_transform);
+  gstbasetransform_class->prepare_output_buffer =
+      GST_DEBUG_FUNCPTR (gst_bayerconvert_prepare_output_buffer);
+}
+
+static void
+gst_bayerconvert_buffer_pool_class_init (GstBayerConvertBufferPoolClass * klass)
+{
+  GObjectClass *gobject_class;
+  GstBufferPoolClass *gstbufferpool_class;
+
+  gobject_class = (GObjectClass *) klass;
+  gstbufferpool_class = (GstBufferPoolClass *) klass;
+  gobject_class->finalize = gst_bayerconvert_buffer_pool_finalize;
+  gstbufferpool_class->alloc_buffer = gst_bayerconvert_buffer_pool_alloc_buffer;
+  gstbufferpool_class->free_buffer = gst_bayerconvert_buffer_pool_free_buffer;
+}
+
+static void
+gst_bayerconvert_init (GstBayerConvert * bayerconvert)
+{
+  struct ext_buffer *buffer;
+  struct mmngr_API *mmngr;
+  int i;
+
+  gst_base_transform_set_qos_enabled ((GstBaseTransform*)bayerconvert, TRUE);
+  bayerconvert->allocator = gst_dmabuf_allocator_new ();
+  bayerconvert->out_pool = gst_bayerconvert_buffer_pool_new (bayerconvert);
+  bayerconvert->current_index = 0;
+
+  for (i = 0; i< NUM_BUF; i++) {
+    buffer = &bayerconvert->buffer[i];
+    mmngr = &buffer->mmngr_buf;
+    mmngr->mmngr_id = -1;
+    mmngr->dmabuf_id = -1;
+    mmngr->dmabuf_fd = -1;
+  }
+}
+
+static void
+gst_bayerconvert_finalize (GObject *obj)
+{
+  GstBayerConvert *bayerconvert = GST_BAYERCONVERT(obj);
+  struct ext_buffer *buffer;
+  struct mmngr_API *mmngr;
+  int i;
+
+  bayer2raw_free_all_outbuf(&bayerconvert->conv);
+  for (i = 0; i< NUM_BUF; i++) {
+    buffer = &bayerconvert->buffer[i];
+    mmngr = &buffer->mmngr_buf;
+    if (mmngr->dmabuf_id > 0)
+      mmngr_export_end_in_user(mmngr->dmabuf_id);
+    if (mmngr->mmngr_id > 0)
+      mmngr_free_in_user(mmngr->mmngr_id);
+  }
+  if(bayerconvert->allocator)
+    gst_object_unref(bayerconvert->allocator);
+}
+
+static GstCaps *
+gst_bayerconvert_transform_caps (GstBaseTransform * trans,
+    GstPadDirection direction, GstCaps * caps, GstCaps * filter)
+{
+  GstCaps *tmp, *result;
+  GstStructure *structure;
+  gint i, caps_size;
+
+  result = gst_caps_copy (caps);
+  caps_size = gst_caps_get_size (result);
+  for (i = 0; i < caps_size; i++) {
+    structure = gst_caps_get_structure (result, i);
+    if (direction == GST_PAD_SINK) {
+      gst_structure_set_name (structure, "video/x-raw");
+    } else {
+      gst_structure_set_name (structure, "video/x-bayer");
+    }
+    gst_structure_remove_fields (structure, "format", "colorimetry",
+        "chroma-site", NULL);
+  }
+
+  if (filter) {
+    tmp = result;
+    result = gst_caps_intersect_full (filter, tmp,
+        GST_CAPS_INTERSECT_FIRST);
+
+    gst_caps_unref (tmp);
+  }
+  GST_DEBUG_OBJECT (trans, "transformed %" GST_PTR_FORMAT " into %"
+      GST_PTR_FORMAT, caps, result);
+  return result;
+}
+
+static int
+create_egl_context(GstBayerConvert *bayerconvert)
+{
+  struct context_bayer2rgb *ctx = &bayerconvert->conv;
+  EGLint numConfigs;
+  EGLContext context;
+  EGLSurface surface = EGL_NO_SURFACE;
+  EGLConfig config;
+
+  EGLint const psurface_attrib[] = {
+    EGL_WIDTH, ctx->width,
+    EGL_HEIGHT, ctx->height,
+    EGL_NONE,
+  };
+
+  EGLint context_attribs[] = {
+    EGL_CONTEXT_CLIENT_VERSION, 2,
+    EGL_NONE,
+  };
+
+  EGLint const fb_attribs[] = {
+    EGL_SURFACE_TYPE, EGL_PBUFFER_BIT,
+    EGL_CONFORMANT, EGL_OPENGL_ES2_BIT,
+    EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,
+    EGL_COLOR_BUFFER_TYPE, EGL_RGB_BUFFER,
+    EGL_DEPTH_SIZE, 0,
+    EGL_STENCIL_SIZE, 0,
+    EGL_LUMINANCE_SIZE, 0,
+    EGL_RED_SIZE, 8,
+    EGL_GREEN_SIZE, 8,
+    EGL_BLUE_SIZE, 8,
+    EGL_ALPHA_SIZE, 0,
+    EGL_BIND_TO_TEXTURE_RGBA, EGL_TRUE,
+    EGL_NONE,
+  };
+
+  EGLDisplay display = eglGetDisplay (EGL_DEFAULT_DISPLAY);
+  if (display == EGL_NO_DISPLAY) {
+    GST_DEBUG_OBJECT ((GstBaseTransform*)bayerconvert, "No EGL Display\n");
+    return -1;
+  }
+
+  if (!eglInitialize (display, NULL, NULL)) {
+    GST_DEBUG_OBJECT ((GstBaseTransform*)bayerconvert, "EGL was not initialized \n");
+    return -1;
+  }
+
+  if ((eglChooseConfig (display, fb_attribs, &config, 1,
+              &numConfigs) != EGL_TRUE)
+      || (numConfigs != 1)) {
+    GST_DEBUG_OBJECT ((GstBaseTransform*)bayerconvert, "Can not choose display config\n");
+    return -1;
+  }
+
+  context = eglCreateContext (display, config, EGL_NO_CONTEXT, context_attribs);
+  if (context == EGL_NO_CONTEXT) {
+    GST_DEBUG_OBJECT ((GstBaseTransform*)bayerconvert, "No context is created\n");
+    return -1;
+  }
+
+  surface = eglCreatePbufferSurface(display, config, psurface_attrib);
+  if (surface == EGL_NO_SURFACE) {
+    GST_DEBUG_OBJECT ((GstBaseTransform*)bayerconvert, "No surface is created\n");
+    return -1;
+  }
+
+  if (!eglMakeCurrent (display, surface, surface, context)) {
+    GST_DEBUG_OBJECT ((GstBaseTransform*)bayerconvert, "Could not make the current window current\n");
+    return -1;
+  }
+
+  ctx->display = display;
+  ctx->surface = surface;
+  ctx->context = context;
+
+  return 0;
+}
+
+static gboolean
+init_buffer(GstBayerConvert *bayerconvert)
+{
+  struct context_bayer2rgb *ctx = &(bayerconvert->conv);
+  struct ext_buffer *buffer;
+  struct mmngr_API *tmp;
+  int i;
+
+  for (i = 0; i < NUM_BUF; i++) {
+    buffer = &(bayerconvert->buffer[i]);
+    tmp = &(buffer->mmngr_buf);
+    tmp->size = ctx->width * ctx->height * 4;
+
+    if (R_MM_OK !=
+        mmngr_alloc_in_user(&tmp->mmngr_id, tmp->size, &tmp->pphy_addr,
+                            &tmp->phard_addr, &tmp->puser_virt_addr,
+                            MMNGR_VA_SUPPORT)) {
+      GST_DEBUG_OBJECT ((GstBaseTransform*)bayerconvert,
+                        "Can't allocate memory by mmngr\n");
+      return -1;
+    } else {
+      if (R_MM_OK !=
+          mmngr_export_start_in_user(&tmp->dmabuf_id, tmp->size, tmp->phard_addr,
+                                     &tmp->dmabuf_fd)) {
+        GST_DEBUG_OBJECT ((GstBaseTransform*)bayerconvert,
+                          "Can't export buffer as DMABUF\n");
+        return -1;
+      }
+    }
+    buffer->index = bayer2raw_create_outbuf_dmabuf(ctx, tmp->dmabuf_fd);
+    if (buffer->index == -1){
+      GST_DEBUG_OBJECT ((GstBaseTransform*)bayerconvert,
+      "Can't init external buffer for output surface\n");
+      return -1;
+    }
+
+    buffer->gst_mem = gst_dmabuf_allocator_alloc (bayerconvert->allocator, tmp->dmabuf_fd, tmp->size);
+    if (buffer->gst_mem == NULL)
+      return -1;
+    buffer->gst_buf = gst_buffer_new();
+    gst_buffer_append_memory (buffer->gst_buf, buffer->gst_mem);
+  }
+
+  return 0;
+}
+
+static GstCaps *
+gst_bayerconvert_fixate_caps (GstBaseTransform * trans,
+    GstPadDirection direction, GstCaps * caps, GstCaps * othercaps)
+{
+  GstBayerConvert *bayerconvert = GST_BAYERCONVERT (trans);
+  GstCaps *result;
+  gint from_w, from_h;
+  gint w = 0, h = 0;
+  gint ret;
+  GstStructure *ins, *outs, *structure;
+
+  GST_DEBUG_OBJECT (trans, "caps %" GST_PTR_FORMAT, caps);
+  GST_DEBUG_OBJECT (trans, "othercaps %" GST_PTR_FORMAT, othercaps);
+
+  othercaps = gst_caps_truncate (othercaps);
+  othercaps = gst_caps_make_writable (othercaps);
+
+  ins = gst_caps_get_structure (caps, 0);
+  outs = gst_caps_get_structure (othercaps, 0);
+
+  gst_structure_get_int (ins, "width", &from_w);
+  gst_structure_get_int (ins, "height", &from_h);
+
+  gst_structure_get_int (outs, "width", &w);
+  gst_structure_get_int (outs, "height", &h);
+
+  if (!w || !h) {
+    gst_structure_fixate_field_nearest_int (outs, "height", from_h);
+    gst_structure_fixate_field_nearest_int (outs, "width", from_w);
+    gst_structure_get_int (outs, "width", &w);
+    gst_structure_get_int (outs, "height", &h);
+  }
+
+  result = gst_caps_intersect (othercaps, caps);
+  if (gst_caps_is_empty (result)) {
+    gst_caps_unref (result);
+    result = othercaps;
+  } else {
+    gst_caps_unref (othercaps);
+  }
+
+  /* fixate remaining fields */
+  result = gst_caps_fixate (result);
+
+  GST_DEBUG_OBJECT (trans, "result caps %" GST_PTR_FORMAT, result);
+
+  GST_DEBUG_OBJECT (trans, "init egl context with caps %" GST_PTR_FORMAT, result);
+
+  bayerconvert->conv.width = w;
+  bayerconvert->conv.height = h;
+
+  ret = create_egl_context(bayerconvert);
+  if (ret == -1) {
+    GST_ELEMENT_ERROR (bayerconvert, CORE, FAILED,
+        ("Can not create egl/gles2 context"), (NULL));
+    goto error;
+  }
+
+  ret = init_bayer_rgb_conversion_extern_output (&bayerconvert->conv);
+  if (ret == -1) {
+    GST_ELEMENT_ERROR (bayerconvert, CORE, FAILED,
+        ("Can not init bayer2rgb lib"), (NULL));
+    goto error;
+  }
+
+  ret = init_buffer(bayerconvert);
+  if (ret == -1) {
+    GST_ELEMENT_ERROR (bayerconvert, CORE, FAILED,
+        ("Can not init external framebuffer"), (NULL));
+    goto error;
+  }
+
+  structure = gst_buffer_pool_get_config (bayerconvert->out_pool);
+  gst_buffer_pool_config_set_params (structure, result, bayerconvert->buffer[0].mmngr_buf.size, NUM_BUF, NUM_BUF);
+  gst_buffer_pool_config_set_allocator(structure, bayerconvert->allocator, NULL);
+  gst_buffer_pool_set_config (bayerconvert->out_pool, structure);
+  gst_buffer_pool_set_active (bayerconvert->out_pool, TRUE);
+  goto finish_caps;
+
+error:
+  gst_caps_unref(result);
+  result = gst_caps_new_empty();
+finish_caps:
+  return result;
+}
+
+static GstFlowReturn gst_bayerconvert_prepare_output_buffer (GstBaseTransform * trans,
+                                          GstBuffer *inbuf, GstBuffer **outbuf)
+{
+  GstBayerConvert *bayerconvert = GST_VIDEO_CONVERT_CAST(trans);
+  GstFlowReturn ret = GST_FLOW_OK;
+
+  ret = gst_buffer_pool_acquire_buffer(bayerconvert->out_pool, outbuf, NULL);
+
+  if(GST_IS_BUFFER(*outbuf) && gst_buffer_is_writable(*outbuf)) {
+    if (!GST_BASE_TRANSFORM_CLASS(base_bayerconvert_class)->copy_metadata (trans,
+                                                inbuf, *outbuf)) {
+      /* something failed, post a warning */
+      GST_ELEMENT_WARNING (trans, STREAM, NOT_IMPLEMENTED,
+      ("could not copy metadata"), (NULL));
+    }
+  }
+
+  return ret;
+}
+
+static GstFlowReturn
+gst_bayerconvert_transform (GstBaseTransform *trans,
+    GstBuffer *in_buf, GstBuffer *out_buf)
+{
+  GstBayerConvert *bayerconvert = GST_VIDEO_CONVERT_CAST(trans);
+  struct context_bayer2rgb *ctx = &bayerconvert->conv;
+  GstMapInfo map;
+  GstMemory *mem;
+  int i;
+
+
+  if (!gst_buffer_map (in_buf, &map, GST_MAP_READ))
+    goto map_failed;
+
+  /* We should select the framebuffer here to ensure attach right framebuffer
+   * match with gst output buffer.
+   */
+  mem = gst_buffer_peek_memory(out_buf, 0);
+  for (i = 0; i < NUM_BUF; i++) {
+    if (mem == bayerconvert->buffer[i].gst_mem) {
+      glFlush();
+      bayer2raw_attach_render_outbuf (ctx, bayerconvert->buffer[i].index);
+      break;
+    }
+  }
+
+  do_bayer_rgb_conversion_texture(ctx, map.data, NULL);
+  glFinish();
+
+  gst_buffer_unmap (in_buf, &map);
+
+  return GST_FLOW_OK;
+map_failed:
+  return GST_FLOW_ERROR;
+}
+
+static GstStateChangeReturn
+gst_bayerconvert_change_state (GstElement * element, GstStateChange transition)
+{
+  GstBayerConvert *bayerconvert = GST_VIDEO_CONVERT_CAST (element);
+
+  switch (transition) {
+    case GST_STATE_CHANGE_PAUSED_TO_READY:
+      if (bayerconvert->out_pool)
+        gst_buffer_pool_set_active (bayerconvert->out_pool, FALSE);
+      break;
+    case GST_STATE_CHANGE_READY_TO_NULL:
+      if (bayerconvert->out_pool) {
+        gst_object_unref (bayerconvert->out_pool);
+        bayerconvert->out_pool = NULL;
+      }
+      break;
+    default:
+      break;
+  }
+  return GST_ELEMENT_CLASS (base_bayerconvert_class)->change_state (element, transition);
+}
+
+static void
+gst_bayerconvert_buffer_pool_init (GstBayerConvertBufferPool * pool)
+{
+  /* No processing */
+}
+
+static GstBufferPool *
+gst_bayerconvert_buffer_pool_new (GstBayerConvert * bayerconvert)
+{
+  GstBayerConvertBufferPool *pool;
+  pool = g_object_new (GST_TYPE_BAYERCONVERT_BUFFER_POOL, NULL);
+  pool->bayerconvert = gst_object_ref (bayerconvert);
+  GST_LOG_OBJECT (pool, "new bayerconvert buffer pool %p", pool);
+
+  return GST_BUFFER_POOL_CAST (pool);
+}
+
+static void
+gst_bayerconvert_buffer_pool_finalize (GObject * object)
+{
+  GstBayerConvertBufferPool *pool = GST_BAYERCONVERT_BUFFER_POOL_CAST (object);
+  gst_object_unref (pool->bayerconvert);
+  G_OBJECT_CLASS (gst_bayerconvert_buffer_pool_parent_class)->finalize (object);
+}
+
+static GstFlowReturn
+gst_bayerconvert_buffer_pool_alloc_buffer (GstBufferPool * bpool,
+    GstBuffer ** buffer, GstBufferPoolAcquireParams * params)
+{
+  GstBayerConvertBufferPool *pool = GST_BAYERCONVERT_BUFFER_POOL_CAST (bpool);
+  GstBayerConvert *bayerconvert = pool->bayerconvert;
+  struct ext_buffer *ext_buf;
+
+  ext_buf = &bayerconvert->buffer[bayerconvert->current_index];
+  *buffer = ext_buf->gst_buf;
+
+  bayerconvert->current_index++;
+  if (bayerconvert->current_index >= NUM_BUF)
+    bayerconvert->current_index = 0;
+  return GST_FLOW_OK;
+}
+
+static void
+gst_bayerconvert_buffer_pool_free_buffer (GstBufferPool * bpool, GstBuffer * buffer)
+{
+  /* No processing */
+}
+
+static gboolean
+plugin_init (GstPlugin * plugin)
+{
+  /* FIXME Remember to set the rank if it's an element that is meant
+     to be autoplugged by decodebin. */
+  return gst_element_register (plugin, "bayerconvert", GST_RANK_NONE,
+      GST_TYPE_BAYERCONVERT);
+}
+
+GST_PLUGIN_DEFINE (GST_VERSION_MAJOR,
+    GST_VERSION_MINOR,
+    bayerconvert,
+    "BAYER to BGRx converter",
+    plugin_init, VERSION, "LGPL", PACKAGE_NAME, GST_PACKAGE_ORIGIN)
diff --git a/ext/bayerconvert/gstbayerconvert.h b/ext/bayerconvert/gstbayerconvert.h
new file mode 100644
index 000000000..ff53b31d4
--- /dev/null
+++ b/ext/bayerconvert/gstbayerconvert.h
@@ -0,0 +1,103 @@
+/* GStreamer
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#ifndef _GST_BAYERCONVERT_H_
+#define _GST_BAYERCONVERT_H_
+
+#include <gst/base/gstbasetransform.h>
+#include <gst/allocators/gstdmabuf.h>
+#include <bayer2raw.h>
+#include <GLES3/gl3.h>
+#include <GLES2/gl2.h>
+#include <GLES2/gl2ext.h>
+#include <EGL/egl.h>
+#include <EGL/eglext.h>
+
+G_BEGIN_DECLS
+
+#define GST_TYPE_BAYERCONVERT           (gst_bayerconvert_get_type())
+#define GST_BAYERCONVERT(obj)           (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_BAYERCONVERT,GstBayerConvert))
+#define GST_BAYERCONVERT_CLASS(klass)   (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_BAYERCONVERT,GstBayerConvertClass))
+#define GST_IS_BAYERCONVERT(obj)        (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_BAYERCONVERT))
+#define GST_IS_BAYERCONVERT_CLASS(obj)  (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_BAYERCONVERT))
+#define GST_VIDEO_CONVERT_CAST(obj)     ((GstBayerConvert *)(obj))
+#define gst_bayerconvert_parent_class   base_bayerconvert_class
+#define gst_bayerconvert_buffer_pool_parent_class    parent_class
+#define GST_TYPE_BAYERCONVERT_BUFFER_POOL     (gst_bayerconvert_buffer_pool_get_type())
+#define GST_BAYERCONVERT_BUFFER_POOL_CAST(obj) ((GstBayerConvertBufferPool*)(obj))
+
+#define NUM_BUF  2
+
+typedef struct _GstBayerConvert GstBayerConvert;
+typedef struct _GstBayerConvertClass GstBayerConvertClass;
+typedef struct _GstBayerConvertBufferPool GstBayerConvertBufferPool;
+typedef struct _GstBayerConvertBufferPoolClass GstBayerConvertBufferPoolClass;
+
+typedef EGLImageKHR (*EGLCREATEIMAGEKHR)(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, EGLint* attr_list);
+typedef EGLBoolean (*EGLDESTROYIMAGEKHR)(EGLDisplay dpy, EGLImageKHR image);
+typedef void (*PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC)(GLenum target, GLeglImageOES image);
+
+struct mmngr_API{
+  int mmngr_id;
+  int dmabuf_id;
+  unsigned long pphy_addr;
+  unsigned long phard_addr;
+  unsigned long puser_virt_addr;
+  unsigned long size;
+  int dmabuf_fd;
+};
+
+struct ext_buffer{
+  int index;
+  GstBuffer *gst_buf;
+  GstMemory *gst_mem;
+  struct mmngr_API mmngr_buf;
+};
+
+struct _GstBayerConvertBufferPool
+{
+  GstBufferPool bufferpool;
+
+  GstBayerConvert *bayerconvert;
+};
+
+struct _GstBayerConvertBufferPoolClass
+{
+  GstBufferPoolClass parent_class;
+};
+
+struct _GstBayerConvert
+{
+  GstBaseTransform base_bayerconvert;
+  struct ext_buffer buffer[NUM_BUF];
+  struct context_bayer2rgb conv;
+  int current_index;
+  GstAllocator *allocator;
+  GstBufferPool *out_pool;
+};
+
+struct _GstBayerConvertClass
+{
+    GstBaseTransformClass base_bayerconvert_class;
+};
+
+GType gst_bayerconvert_get_type (void);
+GType gst_bayerconvert_buffer_pool_get_type (void);
+G_END_DECLS
+
+#endif
diff --git a/ext/bayerconvert/meson.build b/ext/bayerconvert/meson.build
new file mode 100644
index 000000000..c40f18ca3
--- /dev/null
+++ b/ext/bayerconvert/meson.build
@@ -0,0 +1,30 @@
+bayerconvert_sources = [
+  'gstbayerconvert.c'
+]
+
+bayerconvert_deps = [
+  gst_dep,
+  gstbase_dep,
+  gstvideo_dep,
+  gstallocators_dep,
+  declare_dependency(
+    link_args : [
+      '-L/usr/lib64',
+      '-lbayer2raw',
+      '-lEGL',
+      '-lGLESv2',
+      '-lmmngr',
+      '-lmmngrbuf'
+    ]
+  )
+]
+
+bayerconvert = library('gstbayerconvert',
+  bayerconvert_sources,
+  c_args : gst_plugins_bad_args,
+  include_directories : [configinc],
+  dependencies : bayerconvert_deps,
+  install : true,
+  install_dir : plugins_install_dir,
+)
+pkgconfig.generate(bayersink, install_dir : plugins_pkgconfig_install_dir)
diff --git a/ext/meson.build b/ext/meson.build
index 83265240e..51bcd89a4 100644
--- a/ext/meson.build
+++ b/ext/meson.build
@@ -64,3 +64,4 @@ subdir('wpe')
 subdir('x265')
 subdir('zbar')
 subdir('bayersink')
+subdir('bayerconvert')
-- 
2.17.1

