From 65a68e76537b885365a68f17f351219d4cd3e5be Mon Sep 17 00:00:00 2001
From: trungvanle <trung.le.xk@renesas.com>
Date: Mon, 15 Jan 2024 17:53:41 +0700
Subject: [PATCH] New libbayersink (Bayer to RAW converter and display) plugin

This patch adds new plugin bayersink which convert bayer to raw
color format by GPU and display in monitor.

Signed-off-by: trungvanle <trung.le.xk@renesas.com>
---
 ext/bayersink/gstbayersink.c | 410 +++++++++++++++++++++++++++++++++++
 ext/bayersink/gstbayersink.h |  53 +++++
 ext/bayersink/meson.build    |  29 +++
 ext/meson.build              |   1 +
 4 files changed, 493 insertions(+)
 create mode 100644 ext/bayersink/gstbayersink.c
 create mode 100644 ext/bayersink/gstbayersink.h
 create mode 100644 ext/bayersink/meson.build

diff --git a/ext/bayersink/gstbayersink.c b/ext/bayersink/gstbayersink.c
new file mode 100644
index 000000000..c70ff66f6
--- /dev/null
+++ b/ext/bayersink/gstbayersink.c
@@ -0,0 +1,410 @@
+/* GStreamer
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin Street, Suite 500,
+ * Boston, MA 02110-1335, USA.
+ */
+/**
+ * SECTION:element-gstbayersink
+ *
+ * The bayersink element does bayer to RGB conversion in opengl and display
+ *
+ * <refsect2>
+ * <title>Example launch line</title>
+ * |[
+ * gst-launch-1.0 -v videotestsrc ! bayersink
+ * ]|
+ * </refsect2>
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <gst/gst.h>
+#include <gst/video/gstvideosink.h>
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+#include "gstbayersink.h"
+#include <sys/time.h>
+#include <wayland-client.h>
+#include <wayland-egl.h>
+
+struct wl_display *wl_display;
+struct wl_egl_window *egl_window;
+struct wl_surface *wl_surface;
+
+static struct wl_compositor *wl_compositor;
+static struct wl_shell *wl_shell;
+
+GST_DEBUG_CATEGORY_STATIC (gst_bayersink_debug_category);
+#define GST_CAT_DEFAULT gst_bayersink_debug_category
+
+#define UNUSED(x) (void)(x)
+
+/* prototypes */
+
+
+static void gst_bayersink_set_property (GObject * object,
+    guint property_id, const GValue * value, GParamSpec * pspec);
+static void gst_bayersink_get_property (GObject * object,
+    guint property_id, GValue * value, GParamSpec * pspec);
+static gboolean gst_bayersink_set_caps (GstBaseSink * bsink, GstCaps * caps);
+static GstFlowReturn gst_bayersink_show_frame (GstVideoSink * vsink,
+    GstBuffer * buffer);
+
+enum
+{
+  PROP_0
+};
+
+/* pad templates */
+
+static GstStaticPadTemplate gst_bayersink_sink_template =
+GST_STATIC_PAD_TEMPLATE ("sink",
+    GST_PAD_SINK,
+    GST_PAD_ALWAYS,
+    GST_STATIC_CAPS ("video/x-bayer,format=(string)rggb,"
+        "width=(int)[1,MAX],height=(int)[1,MAX],framerate=(fraction)[0/1,MAX]")
+    );
+
+
+/* class initialization */
+G_DEFINE_TYPE_WITH_CODE (GstBayersink, gst_bayersink,
+    GST_TYPE_VIDEO_SINK,
+    GST_DEBUG_CATEGORY_INIT (gst_bayersink_debug_category,
+        "bayersink", 0, "debug category for bayersink element"));
+
+static void
+gst_bayersink_class_init (GstBayersinkClass * klass)
+{
+  GObjectClass *gobject_class;
+  GstElementClass *gstelement_class;
+  GstBaseSinkClass *gstbasesink_class;
+  GstVideoSinkClass *gstvideosink_class;
+
+  gobject_class = (GObjectClass *) klass;
+  gstelement_class = (GstElementClass *) klass;
+  gstbasesink_class = (GstBaseSinkClass *) klass;
+  gstvideosink_class = (GstVideoSinkClass *) klass;
+
+  gst_element_class_add_pad_template (GST_ELEMENT_CLASS (klass),
+      gst_static_pad_template_get (&gst_bayersink_sink_template));
+
+  gst_element_class_set_static_metadata (GST_ELEMENT_CLASS (klass),
+      "Bayer video sink in wayland surface", "Sink/Video",
+      "Converts Bayer to RGB and output to wayland surface",
+      "Refer product of Witekio for Renesas <aguyon@witekio.us>");
+
+  gobject_class->set_property = gst_bayersink_set_property;
+  gobject_class->get_property = gst_bayersink_get_property;
+  gstvideosink_class->show_frame =
+      GST_DEBUG_FUNCPTR (gst_bayersink_show_frame);
+  gstbasesink_class->set_caps =
+      GST_DEBUG_FUNCPTR (gst_bayersink_set_caps);
+}
+
+static void
+gst_bayersink_init (GstBayersink * bayersink)
+{
+ return ;
+}
+
+void
+gst_bayersink_set_property (GObject * object, guint property_id,
+    const GValue * value, GParamSpec * pspec)
+{
+  GstBayersink *bayersink = GST_BAYERSINK (object);
+
+  GST_DEBUG_OBJECT (bayersink, "set_property");
+
+  switch (property_id) {
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+      break;
+  }
+}
+
+void
+gst_bayersink_get_property (GObject * object, guint property_id,
+    GValue * value, GParamSpec * pspec)
+{
+  GstBayersink *bayersink = GST_BAYERSINK (object);
+
+  GST_DEBUG_OBJECT (bayersink, "get_property");
+
+  switch (property_id) {
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+      break;
+  }
+}
+
+static void global_registry_handler(void *data,
+  struct wl_registry *registry, uint32_t id,
+  const char *interface, uint32_t version)
+{
+  UNUSED(data);
+  UNUSED(version);
+
+  if (strcmp(interface, "wl_compositor") == 0)
+    wl_compositor = wl_registry_bind(registry, id, &wl_compositor_interface, 1);
+  else if (strcmp(interface, "wl_shell") == 0)
+    wl_shell = wl_registry_bind(registry, id, &wl_shell_interface, 1);
+}
+
+static void global_registry_remover(void *data,
+	struct wl_registry *registry, uint32_t id)
+{
+  UNUSED(data);
+  UNUSED(registry);
+  UNUSED(id);
+
+  return;
+}
+
+static const struct wl_registry_listener wl_listener = {
+  global_registry_handler,
+  global_registry_remover
+};
+
+static int wayland_initialization(void)
+{
+  struct wl_registry *wl_registry;
+  struct wl_shell_surface *wl_shell_surface;
+
+  wl_display = wl_display_connect(NULL);
+  if (wl_display == NULL) {
+    printf("Can't connect to wayland display\n");
+    return -1;
+  }
+
+  wl_registry = wl_display_get_registry(wl_display);
+  wl_registry_add_listener(wl_registry, &wl_listener, NULL);
+
+  /* Init wayland with global_registry_handler */
+  wl_display_dispatch(wl_display);
+  wl_display_roundtrip(wl_display);
+
+  if (wl_compositor == NULL || wl_shell == NULL) {
+    printf("No compositor or no shell registered\n");
+    return -1;
+  }
+
+  wl_surface = wl_compositor_create_surface(wl_compositor);
+  if (wl_surface == NULL) {
+    printf("No surface created\n");
+    return -1;
+  }
+
+  wl_shell_surface = wl_shell_get_shell_surface(wl_shell, wl_surface);
+  if (wl_shell_surface == NULL) {
+    printf("No shell surface\n");
+    return -1;
+  }
+
+  wl_shell_surface_set_toplevel(wl_shell_surface);
+
+  return 0;
+}
+
+static int create_native_window(struct context_bayer2rgb *ctx)
+{
+  struct wl_region *wl_region;
+
+  wl_region = wl_compositor_create_region(wl_compositor);
+
+  wl_region_add(wl_region, 0, 0, ctx->width, ctx->height);
+  wl_surface_set_opaque_region(wl_surface, wl_region);
+
+  egl_window = wl_egl_window_create(wl_surface, ctx->width, ctx->height);
+
+  if (egl_window == EGL_NO_SURFACE) {
+    printf("No window\n");
+    return -1;
+  }
+
+  return 0;
+}
+
+static int
+create_egl_context(struct context_bayer2rgb *ctx)
+{
+  EGLint numConfigs;
+  EGLContext context;
+  EGLSurface surface = EGL_NO_SURFACE;
+  EGLConfig config;
+
+  EGLint context_attribs[] = {
+    EGL_CONTEXT_CLIENT_VERSION, 2,
+    EGL_NONE, EGL_NONE
+  };
+
+  EGLint const fb_attribs[] = {
+    EGL_SURFACE_TYPE, EGL_PBUFFER_BIT | EGL_PIXMAP_BIT,
+    EGL_CONFORMANT, EGL_OPENGL_ES2_BIT,
+    EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,
+    EGL_COLOR_BUFFER_TYPE, EGL_RGB_BUFFER,
+    EGL_DEPTH_SIZE, 0,
+    EGL_STENCIL_SIZE, 0,
+    EGL_LUMINANCE_SIZE, 0,
+    EGL_RED_SIZE, 8,
+    EGL_GREEN_SIZE, 8,
+    EGL_BLUE_SIZE, 8,
+    EGL_ALPHA_SIZE, 0,
+    EGL_BIND_TO_TEXTURE_RGBA, EGL_TRUE,
+    EGL_NONE, EGL_NONE
+  };
+
+  EGLint const window_attribs[] = {
+    EGL_RENDER_BUFFER, EGL_BACK_BUFFER,
+    EGL_NONE,   EGL_NONE
+  };
+
+  EGLDisplay display = eglGetDisplay (wl_display);
+  if (display == EGL_NO_DISPLAY) {
+    printf("No EGL Display\n");
+    return -1;
+  }
+
+  if (!eglInitialize (display, NULL, NULL)) {
+    printf("No Initialization\n");
+    return -1;
+  }
+
+  if ((eglGetConfigs (display, NULL, 0, &numConfigs) != EGL_TRUE)
+      || (numConfigs == 0)) {
+    printf("No configuration\n");
+    return -1;
+  }
+
+  if ((eglChooseConfig (display, fb_attribs, &config, 1,
+              &numConfigs) != EGL_TRUE)
+      || (numConfigs != 1)) {
+    printf("Can not choose config\n");
+    return -1;
+  }
+
+  context = eglCreateContext (display, config, EGL_NO_CONTEXT, context_attribs);
+  if (context == EGL_NO_CONTEXT) {
+    printf("No context created\n");
+    return -1;
+  }
+
+   surface = eglCreateWindowSurface(display, config, egl_window, window_attribs);
+  if (surface == EGL_NO_SURFACE) {
+    printf("No surface created\n");
+    return -1;
+  }
+
+  if (!eglMakeCurrent (display, surface, surface, context)) {
+    printf("Could not make the current window current\n");
+    return -1;
+  }
+
+  ctx->display = display;
+  ctx->surface = surface;
+  ctx->context = context;
+
+  return 0;
+}
+
+static void draw(struct context_bayer2rgb *ctx, GLuint tex)
+{
+  eglReleaseTexImage(ctx->display, ctx->surface, EGL_TEXTURE_2D);
+  glBindTexture (GL_TEXTURE_2D, tex);
+  eglBindTexImage(ctx->display, ctx->surface, EGL_TEXTURE_2D);
+}
+
+static void refresh_window(struct context_bayer2rgb *ctx)
+{
+  eglSwapBuffers(ctx->display, ctx->surface);
+}
+static gboolean
+gst_bayersink_set_caps (GstBaseSink * bsink, GstCaps * caps)
+{
+  int ret;
+  GstBayersink *bayersink = GST_BAYERSINK (bsink);
+  GstStructure *structure;
+
+  structure = gst_caps_get_structure (caps, 0);
+  gst_structure_get_int (structure, "width", &bayersink->conv.width);
+  gst_structure_get_int (structure, "height", &bayersink->conv.height);
+
+  ret = wayland_initialization();
+  if (ret == -1) {
+    GST_ELEMENT_ERROR (bayersink, CORE, FAILED,
+        ("Can not initialize wayland"), (NULL));
+    return FALSE;
+  }
+
+  ret = create_native_window(&bayersink->conv);
+  if (ret == -1) {
+    GST_ELEMENT_ERROR (bayersink, CORE, FAILED,
+        ("Can not create window"), (NULL));
+    return FALSE;
+  }
+
+  ret = create_egl_context(&bayersink->conv);
+  if (ret == -1) {
+    GST_ELEMENT_ERROR (bayersink, CORE, FAILED,
+        ("Can not create egl/gles2 context"), (NULL));
+    return FALSE;
+  }
+
+  ret = init_bayer_rgb_conversion (&bayersink->conv);
+  if (ret == -1) {
+    GST_ELEMENT_ERROR (bayersink, CORE, FAILED,
+        ("Can not init byer2rgb lib"), (NULL));
+    return FALSE;
+  }
+
+  return TRUE;
+}
+
+static GstFlowReturn
+gst_bayersink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
+{
+  GstBayersink *bayersink = GST_BAYERSINK (vsink);
+  struct context_bayer2rgb *ctx = &bayersink->conv;
+  GstMapInfo *info_in = malloc (sizeof (GstMapInfo));
+  GLuint tex;
+
+  gst_buffer_map (buffer, info_in, GST_MAP_READ);
+
+  wl_display_dispatch_pending(wl_display);
+  do_bayer_rgb_conversion_texture(ctx, info_in->data, &tex);
+  draw(ctx, tex);
+  refresh_window(ctx);
+
+  gst_buffer_unmap (buffer, info_in);
+  free (info_in);
+  return GST_FLOW_OK;
+}
+
+static gboolean
+plugin_init (GstPlugin * plugin)
+{
+  /* FIXME Remember to set the rank if it's an element that is meant
+     to be autoplugged by decodebin. */
+  return gst_element_register (plugin, "bayersink", GST_RANK_NONE,
+      GST_TYPE_BAYERSINK);
+}
+
+GST_PLUGIN_DEFINE (GST_VERSION_MAJOR,
+    GST_VERSION_MINOR,
+    bayersink,
+    "FIXME plugin description",
+    plugin_init, VERSION, "LGPL", PACKAGE_NAME, GST_PACKAGE_ORIGIN)
\ No newline at end of file
diff --git a/ext/bayersink/gstbayersink.h b/ext/bayersink/gstbayersink.h
new file mode 100644
index 000000000..bf980c517
--- /dev/null
+++ b/ext/bayersink/gstbayersink.h
@@ -0,0 +1,53 @@
+/* GStreamer
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#ifndef _GST_BAYERSINK_H_
+#define _GST_BAYERSINK_H_
+
+#include <gst/video/gstvideosink.h>
+
+#include <bayer2raw.h>
+
+G_BEGIN_DECLS
+
+#define GST_TYPE_BAYERSINK   (gst_bayersink_get_type())
+#define GST_BAYERSINK(obj)   (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_BAYERSINK,GstBayersink))
+#define GST_BAYERSINK_CLASS(klass)   (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_BAYERSINK,GstBayersinkClass))
+#define GST_IS_BAYERSINK(obj)   (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_BAYERSINK))
+#define GST_IS_BAYERSINK_CLASS(obj)   (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_BAYERSINK))
+
+typedef struct _GstBayersink GstBayersink;
+typedef struct _GstBayersinkClass GstBayersinkClass;
+
+struct _GstBayersink
+{
+  GstVideoSink base_bayersink;
+
+  struct context_bayer2rgb conv;
+};
+
+struct _GstBayersinkClass
+{
+  GstVideoSinkClass base_bayersink_class;
+};
+
+GType gst_bayersink_get_type (void);
+
+G_END_DECLS
+
+#endif
\ No newline at end of file
diff --git a/ext/bayersink/meson.build b/ext/bayersink/meson.build
new file mode 100644
index 000000000..cfcb28cc8
--- /dev/null
+++ b/ext/bayersink/meson.build
@@ -0,0 +1,29 @@
+bayersink_sources = [
+  'gstbayersink.c'
+]
+
+bayersink_deps = [
+  gst_dep,
+  gstbase_dep,
+  gstvideo_dep,
+  wl_client_dep,
+  declare_dependency(
+    link_args : [
+      '-L/usr/lib64',
+      '-lbayer2raw',
+      '-lEGL',
+      '-lGLESv2',
+      '-lwayland-egl'
+    ]
+  )
+]
+
+bayersink = library('gstbayersink',
+  bayersink_sources,
+  c_args : gst_plugins_bad_args,
+  include_directories : [configinc],
+  dependencies : bayersink_deps,
+  install : true,
+  install_dir : plugins_install_dir,
+)
+pkgconfig.generate(bayersink, install_dir : plugins_pkgconfig_install_dir)
diff --git a/ext/meson.build b/ext/meson.build
index e1ce40588..83265240e 100644
--- a/ext/meson.build
+++ b/ext/meson.build
@@ -63,3 +63,4 @@ subdir('wildmidi')
 subdir('wpe')
 subdir('x265')
 subdir('zbar')
+subdir('bayersink')
-- 
2.17.1

