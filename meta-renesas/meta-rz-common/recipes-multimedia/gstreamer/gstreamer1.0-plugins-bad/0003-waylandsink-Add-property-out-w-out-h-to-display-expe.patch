From 659f722ccb95622f6d10672e971ed8a5348e4eae Mon Sep 17 00:00:00 2001
From: Huynh Thanh Hung <hung.huynh.wz@renesas.com>
Date: Thu, 23 Sep 2021 15:10:00 +0700
Subject: [PATCH] waylandsink: Add property out-w/out-h to display expected
 size

If wayland server can scale the input size of client to expected output
size by new window geometry of xdg_surface or set_transient of
wl_shell_surface, we will get the expected size following out-w/out-h
property

Signed-off-by: Huynh Thanh Hung <hung.huynh.wz@renesas.com>
---
 ext/wayland/gstwaylandsink.c | 35 ++++++++++++++++++++++++++++++++++-
 ext/wayland/gstwaylandsink.h |  2 ++
 ext/wayland/wlwindow.c       | 44 +++++++++++++++++++++++++++++++++-----------
 ext/wayland/wlwindow.h       |  2 +-
 4 files changed, 70 insertions(+), 13 deletions(-)

diff --git a/ext/wayland/gstwaylandsink.c b/ext/wayland/gstwaylandsink.c
index 1a498f8..6142144 100644
--- a/ext/wayland/gstwaylandsink.c
+++ b/ext/wayland/gstwaylandsink.c
@@ -68,6 +68,8 @@ enum
   PROP_SUPPRESS_INTERLACE,
   PROP_WAYLAND_POSITION_X,    /* add property (position_x) */
   PROP_WAYLAND_POSITION_Y,    /* add property (position_y) */
+  PROP_WAYLAND_OUTPUT_WIDTH,    /* add property (out_w) */
+  PROP_WAYLAND_OUTPUT_HEIGHT,   /* add property (out_h) */
 };
 
 #define DEFAULT_USE_SUBSURFACE          TRUE
@@ -240,6 +242,18 @@ gst_wayland_sink_class_init (GstWaylandSinkClass * klass)
                         "Wayland  Position Y value from the application ",
                         0, G_MAXINT, 0, G_PARAM_READWRITE));
 
+  /* install property (out_w) */
+  g_object_class_install_property (G_OBJECT_CLASS(klass), PROP_WAYLAND_OUTPUT_WIDTH,
+      g_param_spec_int ("out_w", "Output Width",
+                        "Wayland  Width size of application ",
+                        0, G_MAXINT, 0, G_PARAM_READWRITE));
+
+  /* install property (out_h) */
+  g_object_class_install_property (G_OBJECT_CLASS(klass), PROP_WAYLAND_OUTPUT_HEIGHT,
+      g_param_spec_int ("out_h", "Output Height",
+                        "Wayland  Height size of application ",
+                        0, G_MAXINT, 0, G_PARAM_READWRITE));
+
 }
 
 static void
@@ -252,6 +266,8 @@ gst_wayland_sink_init (GstWaylandSink * sink)
   sink->enable_interlace = !DEFAULT_SUPPRESS_INTERLACE;
   sink->position_x = -1;
   sink->position_y = -1;
+  sink->out_w = -1;
+  sink->out_h = -1;
 }
 
 static void
@@ -300,6 +316,14 @@ gst_wayland_sink_get_property (GObject * object,
       /* set position_y property */
       g_value_set_int (value, sink->position_y);
       break;
+    case PROP_WAYLAND_OUTPUT_WIDTH:
+      /* set out_w property */
+      g_value_set_int (value, sink->out_w);
+      break;
+    case PROP_WAYLAND_OUTPUT_HEIGHT:
+      /* set out_h property */
+      g_value_set_int (value, sink->out_h);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -342,6 +366,14 @@ gst_wayland_sink_set_property (GObject * object,
       /* get position_y property */
       sink->position_y = g_value_get_int (value);
       break;
+    case PROP_WAYLAND_OUTPUT_WIDTH:
+      /* get out_w property */
+      sink->out_w = g_value_get_int (value);
+      break;
+    case PROP_WAYLAND_OUTPUT_HEIGHT:
+      /* get out_h property */
+      sink->out_h = g_value_get_int (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -781,7 +813,8 @@ gst_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
       /* if we were not provided a window, create one ourselves */
       sink->window = gst_wl_window_new_toplevel (sink->display,
           &sink->video_info, sink->fullscreen, &sink->render_lock,
-          sink->position_x, sink->position_y);
+          sink->position_x, sink->position_y,
+          sink->out_w, sink->out_h);
       g_signal_connect_object (sink->window, "closed",
           G_CALLBACK (on_window_closed), sink, 0);
     }
diff --git a/ext/wayland/gstwaylandsink.h b/ext/wayland/gstwaylandsink.h
index ffbb1ea..6a0ea04 100644
--- a/ext/wayland/gstwaylandsink.h
+++ b/ext/wayland/gstwaylandsink.h
@@ -75,6 +75,8 @@ struct _GstWaylandSink
   gboolean enable_interlace;
   gint position_x;
   gint position_y;
+  gint out_w;
+  gint out_h;
 };
 
 struct _GstWaylandSinkClass
diff --git a/ext/wayland/wlwindow.c b/ext/wayland/wlwindow.c
index 8123900..dbac0e4 100644
--- a/ext/wayland/wlwindow.c
+++ b/ext/wayland/wlwindow.c
@@ -251,9 +251,21 @@ gst_wl_window_ensure_fullscreen (GstWlWindow * window, gboolean fullscreen)
 
 GstWlWindow *
 gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
-    gboolean fullscreen, GMutex * render_lock, gint posx, gint posy)
+    gboolean fullscreen, GMutex * render_lock, gint posx, gint posy,
+    gint out_w, gint out_h)
 {
   GstWlWindow *window;
+  gint surf_w =
+       gst_util_uint64_scale_int_round (info->width, info->par_n, info->par_d);
+  gint surf_h = info->height;
+
+  /* Define the display size of client in wayland server.
+   * The initial size of client no need to change.
+   */
+  if (out_w > 1)
+    surf_w = out_w;
+  if (out_h > 1)
+    surf_h = out_h;
 
   window = gst_wl_window_new_internal (display, render_lock);
 
@@ -282,12 +294,14 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
 
     gst_wl_window_ensure_fullscreen (window, fullscreen);
 
-    /* We expect wayland server can handle set new position by new window geometry */
-    if (!fullscreen && (posx != -1) && (posy != -1)){
-      /* Only re-position when input valid position and not fullscreen mode*/
-      gint width =
-        gst_util_uint64_scale_int_round (info->width, info->par_n, info->par_d);
-      xdg_surface_set_window_geometry(window->xdg_surface, posx, posy, width, info->height);
+    /* Only re-configure new window geometry when not fullscreen mode
+     * Wayland Server should handle the position is valid or not
+     */
+    if (!fullscreen){
+      /* Expect Wayland Server can handle new geometry of xdg_surface */
+      xdg_surface_set_window_geometry(window->xdg_surface,
+                                      posx, posy,
+                                      surf_w, surf_h);
     }
 
     /* Finally, commit the xdg_surface state as toplevel */
@@ -317,10 +331,18 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
     wl_shell_surface_add_listener (window->wl_shell_surface,
         &wl_shell_surface_listener, window);
 
-    /* We expect wayland server can handle new position by set_transient API*/
-    if (!fullscreen && (posx != -1) && (posy != -1)){
-      /* Only re-position when input valid position and not fullscreen mode*/
-      wl_shell_surface_set_transient (window->wl_shell_surface, window->area_surface, posx, posy, 0);
+    /* Only re-configure new window geometry when not fullscreen mode
+     * Wayland Server should handle the position is valid or not
+     */
+    if (!fullscreen){
+      /* Expect wayland server can handle new geometry by
+       * transient API of wl_shell_surface.
+       * We use flag parameter of set_transient to store the new surface size
+       */
+      wl_shell_surface_set_transient (window->wl_shell_surface,
+                                      window->area_surface,
+                                      posx, posy,
+                                      surf_w << 16 | surf_h );
     }
 
     gst_wl_window_ensure_fullscreen (window, fullscreen);
diff --git a/ext/wayland/wlwindow.h b/ext/wayland/wlwindow.h
index 11b1413..8265f3c 100644
--- a/ext/wayland/wlwindow.h
+++ b/ext/wayland/wlwindow.h
@@ -86,7 +86,7 @@ void gst_wl_window_ensure_fullscreen (GstWlWindow * window,
         gboolean fullscreen);
 GstWlWindow *gst_wl_window_new_toplevel (GstWlDisplay * display,
         const GstVideoInfo * info, gboolean fullscreen, GMutex * render_lock,
-        gint posx, gint posy);
+        gint posx, gint posy, gint out_w, gint out_h);
 GstWlWindow *gst_wl_window_new_in_surface (GstWlDisplay * display,
         struct wl_surface * parent, GMutex * render_lock);
 
-- 
2.7.4
